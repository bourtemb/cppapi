// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2000
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0.3

#include <OB/CORBAClient.h>
#include <idl/tango.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined!
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4000300L)
#       error ORBacus version mismatch!
#   endif
#endif

namespace Tango
{

OB::TypeCodeConst _tc_DevBoolean(
"0000000000000015000000380009ab280000001949444c3a54616e676f2f446576426f6f6c656"
"16e3a312e300008ec300000000b446576426f6f6c65616e000000000008"
);

OB::TypeCodeConst _tc_DevDouble(
"0000000000000015000000340009af680000001849444c3a54616e676f2f446576446f75626c6"
"53a312e30000000000a446576446f75626c65006c6500000007"
);

OB::TypeCodeConst _tc_DevFloat(
"0000000000000015000000340009b1e80000001749444c3a54616e676f2f446576466c6f61743"
"a312e30000000000009446576466c6f617400006c6500000006"
);

OB::TypeCodeConst _tc_DevLong(
"0000000000000015000000300009b5900000001649444c3a54616e676f2f4465764c6f6e673a3"
"12e30000000000000084465764c6f6e670000000003"
);

OB::TypeCodeConst _tc_DevShort(
"0000000000000015000000340009c2300000001749444c3a54616e676f2f44657653686f72743"
"a312e3000000000000944657653686f72740000000300000002"
);

OB::TypeCodeConst _tc_DevString(
"0000000000000015000000380009c4c80000001849444c3a54616e676f2f446576537472696e6"
"73a312e30000000000a446576537472696e670000030000001200000000"
);

OB::TypeCodeConst _tc_DevULong(
"0000000000000015000000340009c7600000001749444c3a54616e676f2f446576554c6f6e673"
"a312e30000000000009446576554c6f6e670000000300000005"
);

OB::TypeCodeConst _tc_DevUShort(
"0000000000000015000000340009c9f80000001849444c3a54616e676f2f4465765553686f727"
"43a312e30000000000a4465765553686f727400000300000004"
);

OB::TypeCodeConst _tc_DevVarFloatArray(
"0000000000000015000000540009d6800000001f49444c3a54616e676f2f446576566172466c6"
"f617441727261793a312e30005500000011446576566172466c6f6174417272617900fefeff00"
"0000130000000c000000000000000600000000"
);

OB::TypeCodeConst _tc_DevVarDoubleArray(
"0000000000000015000000540009dd700000002049444c3a54616e676f2f446576566172446f7"
"5626c6541727261793a312e300000000012446576566172446f75626c65417272617900feff00"
"0000130000000c000000000000000700000000"
);

OB::TypeCodeConst _tc_DevVarShortArray(
"0000000000000015000000540009e3780000001f49444c3a54616e676f2f44657656617253686"
"f727441727261793a312e3000000000001144657656617253686f727441727261790000feff00"
"0000130000000c000000000000000200000000"
);

OB::TypeCodeConst _tc_DevVarLongArray(
"0000000000000015000000500009f1780000001e49444c3a54616e676f2f4465765661724c6f6"
"e6741727261793a312e30000000000000104465765661724c6f6e674172726179000000001300"
"00000c0000000c0000000300000000"
);

OB::TypeCodeConst _tc_DevVarCharArray(
"0000000000000015000000500009f6180000001e49444c3a54616e676f2f44657656617243686"
"17241727261793a312e3000000000000010446576566172436861724172726179000000001300"
"00000c0000000c0000000a00000000"
);

OB::TypeCodeConst _tc_DevVarStringArray(
"0000000000000015000000580009fa400000002049444c3a54616e676f2f44657656617253747"
"2696e6741727261793a312e300000000012446576566172537472696e67417272617900001300"
"0000130000001000000000000000120000000000000000"
);

OB::TypeCodeConst _tc_DevVarUShortArray(
"0000000000000015000000540009fdc00000002049444c3a54616e676f2f44657656617255536"
"86f727441727261793a312e3000000000124465765661725553686f7274417272617900001300"
"0000130000000c000000000000000400000000"
);

OB::TypeCodeConst _tc_DevVarULongArray(
"000000000000001500000054000a01200000001f49444c3a54616e676f2f446576566172554c6"
"f6e6741727261793a312e30000000000011446576566172554c6f6e6741727261790000001300"
"0000130000000c000000000000000500000000"
);

OB::TypeCodeConst _tc_DevVarLongStringArray(
"000000000000000f0000011c000a00180000002449444c3a54616e676f2f4465765661724c6f6"
"e67537472696e6741727261793a312e3000000000164465765661724c6f6e67537472696e6741"
"7272617900000c00000002000000076c76616c756500000000001500000050000000010000001"
"e49444c3a54616e676f2f4465765661724c6f6e6741727261793a312e30000000000000104465"
"765661724c6f6e67417272617900000000130000000c00bee4e00000000300000000000000077"
"376616c756500000000001500000058000000010000002049444c3a54616e676f2f4465765661"
"72537472696e6741727261793a312e300000000012446576566172537472696e6741727261790"
"0ff30000000130000001000bee660000000120000000000000000"
);

OB::TypeCodeConst _tc_DevVarDoubleStringArray(
"000000000000000f00000124000a1e500000002649444c3a54616e676f2f446576566172446f7"
"5626c65537472696e6741727261793a312e3000000200000018446576566172446f75626c6553"
"7472696e6741727261790000000002000000076476616c7565001800000015000000540000000"
"10000002049444c3a54616e676f2f446576566172446f75626c6541727261793a312e30000000"
"0012446576566172446f75626c654172726179004d30000000130000000c0000ff00000000070"
"0000000000000077376616c75650002000000150000005800bee8000000002049444c3a54616e"
"676f2f446576566172537472696e6741727261793a312e3000000000124465765661725374726"
"96e67417272617900e660000000130000001000bee5d0000000120000000000000000"
);

OB::TypeCodeConst _tc_DevSecurity(
"000000000000001500000048000a37580000001a49444c3a54616e676f2f44657653656375726"
"974793a312e3000ec300000000c446576536563757269747900000000130000000c0023c1b800"
"00000a00000004"
);

OB::TypeCodeConst _tc_DevApplet(
"000000000000001500000044000a40a80000001849444c3a54616e676f2f4465764170706c657"
"43a312e30000000000a4465764170706c6574007572000000130000000c0000000c0000000a00"
"000000"
);

OB::TypeCodeConst _tc_DeviceList(
"000000000000001500000078000a4f080000001949444c3a54616e676f2f4465766963654c697"
"3743a312e300008ec300000000b4465766963654c6973740013000000130000003c0000000a00"
"00000e0000002b000000000000001549444c3a54616e676f2f4465766963653a312e300000000"
"100000007446576696365000000000000"
);

OB::TypeCodeConst _tc_DevPriority(
"000000000000001100000054000a50800000001a49444c3a54616e676f2f4465765072696f726"
"974793a312e3000ec300000000c4465765072696f726974790000000002000000074e4f524d41"
"4c000e0000000c4f55545f4f465f42414e4400"
);

OB::TypeCodeConst _tc_DevProtocol(
"000000000000001100000062000a51f80000001a49444c3a54616e676f2f44657650726f746f6"
"36f6c3a312e3000ec300000000c44657650726f746f636f6c00000000030000000549494f5000"
"4c000e0000000a4f4e435250435544500044000000000a4f4e4352504354435000"
);

OB::TypeCodeConst _tc_AttrQuality(
"00000000000000110000006b000a55b80000001a49444c3a54616e676f2f417474725175616c6"
"974793a312e3000ec300000000c417474725175616c69747900000000030000000b415454525f"
"56414c4944000a0000000d415454525f494e56414c4944000a55800000000b415454525f414c4"
"1524d00"
);

OB::TypeCodeConst _tc_AttrWriteType(
"000000000000001100000077000a57b00000001c49444c3a54616e676f2f41747472577269746"
"5547970653a312e30000000000e41747472577269746554797065000003000000040000000552"
"4541440044000a00000010524541445f574954485f57524954450000000006575249544500000"
"10000000b524541445f575249544500"
);

OB::TypeCodeConst _tc_AttrDataFormat(
"000000000000001100000066000a60380000001d49444c3a54616e676f2f41747472446174614"
"66f726d61743a312e300000000e0000000f4174747244617461466f726d617400040000000300"
"0000075343414c4152000000000009535045435452554d000a600000000006494d41474500"
);

OB::TypeCodeConst _tc_DevSource(
"000000000000001100000043000a61b00000001849444c3a54616e676f2f446576536f7572636"
"53a312e30000000000a446576536f757263650074720000000200000003445300040000000344"
"4300"
);

OB::TypeCodeConst _tc_ErrSeverity(
"000000000000001100000056000a42980000001a49444c3a54616e676f2f45727253657665726"
"974793a312e3000ec300000000c45727253657665726974790000000003000000055741524e00"
"43000700000004455252000000000650414e494300"
);

OB::TypeCodeConst _tc_DevState(
"0000000000000011000000d4000a63580000001749444c3a54616e676f2f44657653746174653"
"a312e300000000000094465765374617465007665720000000e000000034f4e0005000000044f"
"46460000000006434c4f5345000006000000054f50454e000a632000000007494e53455254000"
"1000000084558545241435400000000074d4f56494e470001000000085354414e444259000000"
"00064641554c5400feff00000005494e4954000f4d300000000852554e4e494e4700000000064"
"14c41524d005ffc0000000844495341424c450000000008554e4b4e4f574e00"
);

OB::TypeCodeConst _tc_MonitorId(
"0000000000000011000000a4000a63f80000001849444c3a54616e676f2f4d6f6e69746f72496"
"43a312e30000000000a4d6f6e69746f72496400657200000005000000115245504f5254494e47"
"5f5349474e414c00000000000000105245504f5254494e475f434c4f434b00000000105245504"
"f5254494e475f414c41524d00000000175245504f5254494e475f53544154455f4348414e4745"
"0001000000105245504f5254494e475f4556454e5400"
);

OB::TypeCodeConst _tc_TimeVal(
"000000000000000f00000060000a64980000001649444c3a54616e676f2f54696d6556616c3a3"
"12e300000000000000854696d6556616c00000000030000000774765f736563004f0000000300"
"00000874765f7573656300000000030000000874765f6e7365630000000003"
);

OB::TypeCodeConst _tc_ReportingClockInfo(
"000000000000000f00000148000aa8f00000002149444c3a54616e676f2f5265706f7274696e6"
"7436c6f636b496e666f3a312e300004cc18000000135265706f7274696e67436c6f636b496e66"
"6f00390000000300000008656c6170736564000000000f00000060000000010000001649444c3"
"a54616e676f2f54696d6556616c3a312e300031180000000854696d6556616c00000000030000"
"000774765f73656300ff000000030000000874765f7573656300000000030000000874765f6e7"
"3656300000000030000000a7469636b5f73697a650040780000000f0000006000000001000000"
"1649444c3a54616e676f2f54696d6556616c3a312e300044080000000854696d6556616c00000"
"000030000000774765f7365630060000000030000000874765f75736563000000000300000008"
"74765f6e73656300000000030000000c7469636b5f6e756d6265720000000005"
);

OB::TypeCodeConst _tc_ReportingEventInfo(
"000000000000000f000000f0000ac3980000002149444c3a54616e676f2f5265706f7274696e6"
"74576656e74496e666f3a312e300004cc18000000135265706f7274696e674576656e74496e66"
"6f003900000003000000067374616d700000000000000f00000060000000010000001649444c3"
"a54616e676f2f54696d6556616c3a312e300031180000000854696d6556616c00000000030000"
"000774765f73656300ff000000030000000874765f7573656300000000030000000874765f6e7"
"365630000000003000000096576656e745f6964003d40780000000300000006706172616d00c3"
"60000000130000000c000000010000000a00000008"
);

OB::TypeCodeConst _tc_MonitorData(
"00000000000000100000037c000acb300000001a49444c3a54616e676f2f4d6f6e69746f72446"
"174613a312e3000ec300000000c4d6f6e69746f72446174610000000011000000a40023c1b800"
"00001849444c3a54616e676f2f4d6f6e69746f7249643a312e30000000000a4d6f6e69746f724"
"96400000000000005000000115245504f5254494e475f5349474e414c00000000000000105245"
"504f5254494e475f434c4f434b00000000105245504f5254494e475f414c41524d00000000175"
"245504f5254494e475f53544154455f4348414e47450078000000105245504f5254494e475f45"
"56454e54000000000200000003000000010000000f7265705f636c6f636b5f696e666f0000000"
"0000f0000014800bee6600000002149444c3a54616e676f2f5265706f7274696e67436c6f636b"
"496e666f3a312e3000dec524000000135265706f7274696e67436c6f636b496e666f000000000"
"00300000008656c6170736564000000000f000000600008e2e00000001649444c3a54616e676f"
"2f54696d6556616c3a312e3000314e0000000854696d6556616c00000000030000000774765f7"
"3656300e8000000030000000874765f7573656300000000030000000874765f6e736563000000"
"00030000000a7469636b5f73697a6500ec900000000f000000600008e1800000001649444c3a5"
"4616e676f2f54696d6556616c3a312e300000000000000854696d6556616c0000000003000000"
"0774765f73656300f8000000030000000874765f7573656300000000030000000874765f6e736"
"56300000000030000000c7469636b5f6e756d6265720000000005000000040000000f7265705f"
"6576656e745f696e666f00ff0000000f000000f0000bdb900000002149444c3a54616e676f2f5"
"265706f7274696e674576656e74496e666f3a312e3000a2313c000000135265706f7274696e67"
"4576656e74496e666f000000000003000000067374616d700000000000000f000000600000000"
"00000001649444c3a54616e676f2f54696d6556616c3a312e3000e8bc0000000854696d655661"
"6c00000000030000000774765f73656300ff000000030000000874765f7573656300000000030"
"000000874765f6e7365630000000003000000096576656e745f69640000000000000003000000"
"06706172616d000000000000130000000c000ac2780000000a00000008000000000000000a636"
"25f726561736f6e004dc00000001200000000"
);

OB::TypeCodeConst _tc_MonitorInfo(
"000000000000000f00000488000b49580000001a49444c3a54616e676f2f4d6f6e69746f72496"
"e666f3a312e3000ec300000000c4d6f6e69746f72496e666f00000000020000000b6d6f6e6974"
"6f725f696400ff00000011000000a4000000000000001849444c3a54616e676f2f4d6f6e69746"
"f7249643a312e30000000000a4d6f6e69746f72496400000100000005000000115245504f5254"
"494e475f5349474e414c00000001000000105245504f5254494e475f434c4f434b00000000105"
"245504f5254494e475f414c41524d00000000175245504f5254494e475f53544154455f434841"
"4e47450001000000105245504f5254494e475f4556454e5400000000096d6f6e5f64617461000"
"b43c8000000100000037c00bee6600000001a49444c3a54616e676f2f4d6f6e69746f72446174"
"613a312e300044080000000c4d6f6e69746f72446174610000000011000000a40000000000000"
"01849444c3a54616e676f2f4d6f6e69746f7249643a312e30000000000a4d6f6e69746f724964"
"002bd800000005000000115245504f5254494e475f5349474e414c00a2313c000000105245504"
"f5254494e475f434c4f434b00000000105245504f5254494e475f414c41524d00000000175245"
"504f5254494e475f53544154455f4348414e47450000000000105245504f5254494e475f45564"
"54e54000000000200000003000000010000000f7265705f636c6f636b5f696e666f00b8000000"
"0f0000014800bee6f80000002149444c3a54616e676f2f5265706f7274696e67436c6f636b496"
"e666f3a312e3000000000000000135265706f7274696e67436c6f636b496e666f00d800000003"
"00000008656c6170736564000000000f00000060000ce5000000001649444c3a54616e676f2f5"
"4696d6556616c3a312e300000380000000854696d6556616c00000000030000000774765f7365"
"630084000000030000000874765f7573656300000000030000000874765f6e736563000000000"
"30000000a7469636b5f73697a650064480000000f0000006000bee8bc0000001649444c3a5461"
"6e676f2f54696d6556616c3a312e300000000000000854696d6556616c0000000003000000077"
"4765f7365630000000000030000000874765f7573656300000000030000000874765f6e736563"
"00000000030000000c7469636b5f6e756d6265720000000005000000040000000f7265705f657"
"6656e745f696e666f00000000000f000000f000bee8b80000002149444c3a54616e676f2f5265"
"706f7274696e674576656e74496e666f3a312e30009f2eb8000000135265706f7274696e67457"
"6656e74496e666f00b400000003000000067374616d7000eba80000000f000000600000000100"
"00001649444c3a54616e676f2f54696d6556616c3a312e3000000b0000000854696d6556616c0"
"0000000030000000774765f7365630018000000030000000874765f7573656300000000030000"
"000874765f6e7365630000000003000000096576656e745f6964000dd14c00000003000000067"
"06172616d0044a0000000130000000c00a2313c0000000a00000008000000000000000a63625f"
"726561736f6e00e9480000001200000000"
);

OB::TypeCodeConst _tc_CallBack(
"000000000000000e0000002d000000000000001749444c3a54616e676f2f43616c6c4261636b3"
"a312e3000740000000943616c6c4261636b00"
);

OB::TypeCodeConst _tc_DevCallBackData(
"000000000000000f000000e4000b1c080000001e49444c3a54616e676f2f44657643616c6c426"
"1636b446174613a312e3000feff0000001044657643616c6c4261636b44617461000000000400"
"00000663625f696400000000000003000000076172676f757400d00000000b000000077374617"
"475730000000000030000000574696d65000531180000000f0000006000000000000000164944"
"4c3a54616e676f2f54696d6556616c3a312e30004e380000000854696d6556616c00000000030"
"000000774765f7365630038000000030000000874765f7573656300000000030000000874765f"
"6e7365630000000003"
);

OB::TypeCodeConst _tc_DevCallBackDataList(
"000000000000001500000140000b57b00000002249444c3a54616e676f2f44657643616c6c426"
"1636b446174614c6973743a312e3000cc180000001444657643616c6c4261636b446174614c69"
"73740000000013000000f4000f48680000000f000000e4000b57780000001e49444c3a54616e6"
"76f2f44657643616c6c4261636b446174613a312e300000010000001044657643616c6c426163"
"6b4461746100000000040000000663625f6964004c7000000003000000076172676f757400000"
"000000b000000077374617475730002000000030000000574696d65000b5a3c0000000f000000"
"60000000010000001649444c3a54616e676f2f54696d6556616c3a312e3000010000000008546"
"96d6556616c00000000030000000774765f73656300d0000000030000000874765f7573656300"
"000000030000000874765f6e736563000000000300000000"
);

OB::TypeCodeConst _tc_DevCallBackInfo(
"000000000000000f0000014c000b5b380000001e49444c3a54616e676f2f44657643616c6c426"
"1636b496e666f3a312e3000312e0000001044657643616c6c4261636b496e666f000000000200"
"00000863625f64617461000000000f000000e4000000e40000001e49444c3a54616e676f2f446"
"57643616c6c4261636b446174613a312e300031180000001044657643616c6c4261636b446174"
"6100000000040000000663625f6964005f6900000003000000076172676f7574006f0000000b0"
"00000077374617475730074000000030000000574696d6500bee8000000000f00000060000b5b"
"000000001649444c3a54616e676f2f54696d6556616c3a312e300000010000000854696d65566"
"16c00000000030000000774765f73656300e0000000030000000874765f757365630000000003"
"0000000874765f6e73656300000000030000000a757365725f6461746100001e0000000b"
);

OB::TypeCodeConst _tc_DevCallBackInfoList(
"000000000000000f000001b0000b67c80000002249444c3a54616e676f2f44657643616c6c426"
"1636b496e666f4c6973743a312e3000cc180000001444657643616c6c4261636b496e666f4c69"
"737400000000020000000863625f64617461000000001500000140000000010000002249444c3"
"a54616e676f2f44657643616c6c4261636b446174614c6973743a312e30000000000000144465"
"7643616c6c4261636b446174614c6973740000000013000000f400ff00000000000f000000e40"
"0fefeff0000001e49444c3a54616e676f2f44657643616c6c4261636b446174613a312e300067"
"900000001044657643616c6c4261636b4461746100000000040000000663625f6964000000000"
"00003000000076172676f757400600000000b0000000773746174757300ff0000000300000005"
"74696d6500ba44080000000f0000006000fffffd0000001649444c3a54616e676f2f54696d655"
"6616c3a312e300039100000000854696d6556616c00000000030000000774765f73656300e800"
"0000030000000874765f7573656300000000030000000874765f6e73656300000000030000000"
"00000000a757365725f6461746100a3200000000b"
);

OB::TypeCodeConst _tc_DevCmdInfo(
"000000000000000f000000bc000b84880000001949444c3a54616e676f2f446576436d64496e6"
"66f3a312e300008ec300000000b446576436d64496e666f00880000000600000009636d645f6e"
"616d6500fefeff000000120000000000000008636d645f746167000000000300000008696e5f7"
"47970650000000003000000096f75745f7479706500000001000000030000000d696e5f747970"
"655f64657363000e059000000012000000000000000e6f75745f747970655f646573630001000"
"000001200000000"
);

OB::TypeCodeConst _tc_DevCmdInfoList(
"000000000000001500000110000ba9b00000001d49444c3a54616e676f2f446576436d64496e6"
"66f4c6973743a312e3000fefeff0000000f446576436d64496e666f4c69737400f00000001300"
"0000cc00fefeff0000000f000000bc000000000000001949444c3a54616e676f2f446576436d6"
"4496e666f3a312e30000000000000000b446576436d64496e666f00010000000600000009636d"
"645f6e616d6500fefeff000000120000000000000008636d645f7461670000000003000000086"
"96e5f747970650000000003000000096f75745f7479706500000001000000030000000d696e5f"
"747970655f646573630000000100000012000000000000000e6f75745f747970655f646573630"
"0a548000000120000000000000000"
);

OB::TypeCodeConst _tc_DevError(
"000000000000000f000000e0000ba8c80000001749444c3a54616e676f2f4465764572726f723"
"a312e300000000000094465764572726f72006576430000000400000007726561736f6e001300"
"00001200000000000000097365766572697479000000190000001100000056000000010000001"
"a49444c3a54616e676f2f45727253657665726974793a312e300000010000000c457272536576"
"65726974790000000003000000055741524e0000000800000004455252000000000650414e494"
"3005f740000000564657363000000090000001200000000000000076f726967696e0001000000"
"1200000000"
);

OB::TypeCodeConst _tc_DevErrorList(
"000000000000001500000130000bda880000001b49444c3a54616e676f2f4465764572726f724"
"c6973743a312e3000300000000d4465764572726f724c6973740000000200000013000000f000"
"0000390000000f000000e0000f48300000001749444c3a54616e676f2f4465764572726f723a3"
"12e300000000000094465764572726f72000000010000000400000007726561736f6e00000000"
"001200000000000000097365766572697479000f4cc800000011000000560000ff000000001a4"
"9444c3a54616e676f2f45727253657665726974793a312e300000010000000c45727253657665"
"726974790000000003000000055741524e0000000000000004455252000000000650414e49430"
"0d9c0000000056465736300bee6600000001200000000000000076f726967696e003c00000012"
"0000000000000000"
);

OB::TypeCodeConst _tc_DevFailed(
"000000000000001600000178000bd8700000001849444c3a54616e676f2f4465764661696c656"
"43a312e30000000000a4465764661696c6564006f7200000001000000076572726f727300f000"
"00001500000130000000000000001b49444c3a54616e676f2f4465764572726f724c6973743a3"
"12e3000000000000d4465764572726f724c6973740000000100000013000000f0000000000000"
"000f000000e0000000090000001749444c3a54616e676f2f4465764572726f723a312e30001a0"
"00000094465764572726f72005365760000000400000007726561736f6e007800000012000000"
"00000000097365766572697479000000000000001100000056000000010000001a49444c3a546"
"16e676f2f45727253657665726974793a312e3000e5d00000000c457272536576657269747900"
"00000003000000055741524e0000001000000004455252000000000650414e494300000000000"
"00564657363000939100000001200000000000000076f726967696e0060000000120000000000"
"000000"
);

OB::TypeCodeConst _tc_AttributeConfig(
"000000000000000f0000031c000be6480000001e49444c3a54616e676f2f41747472696275746"
"5436f6e6669673a312e3000640000000010417474726962757465436f6e666967000000001200"
"0000056e616d65000000000000001200000000000000097772697461626c65000000010000001"
"100000077000000010000001c49444c3a54616e676f2f417474725772697465547970653a312e"
"30000000000e41747472577269746554797065003cc8000000040000000552454144000000000"
"0000010524541445f574954485f57524954450000000006575249544500e51c0000000b524541"
"445f575249544500010000000c646174615f666f726d617400000000110000006600000000000"
"0001d49444c3a54616e676f2f4174747244617461466f726d61743a312e3000a2313c0000000f"
"4174747244617461466f726d6174001000000003000000075343414c4152001e0000000953504"
"5435452554d0009391000000006494d4147450039100000000a646174615f7479706500e56000"
"0000030000000a6d61785f64696d5f78005808000000030000000a6d61785f64696d5f7900000"
"0000000030000000c6465736372697074696f6e000000001200000000000000066c6162656c00"
"027e000000120000000000000005756e69740000000000000012000000000000000e7374616e6"
"46172645f756e697400000100000012000000000000000d646973706c61795f756e6974000000"
"00000000120000000000000007666f726d617400b800000012000000000000000a6d696e5f766"
"16c756500000400000012000000000000000a6d61785f76616c75650000000000001200000000"
"0000000a6d696e5f616c61726d00000000000012000000000000000a6d61785f616c61726d00e"
"a000000001200000000000000137772697461626c655f617474725f6e616d6500c40000001200"
"0000000000000b657874656e73696f6e7300c40000001500000058000be51c0000002049444c3"
"a54616e676f2f446576566172537472696e6741727261793a312e300000000012446576566172"
"537472696e6741727261790023c80000001300000010000e2050000000120000000000000000"
);

OB::TypeCodeConst _tc_AttributeValue(
"000000000000000f00000178000c47300000001d49444c3a54616e676f2f41747472696275746"
"556616c75653a312e3000fefeff0000000f41747472696275746556616c756500f00000000600"
"00000676616c75650000000000000b000000087175616c69747900000000110000006b0000000"
"10000001a49444c3a54616e676f2f417474725175616c6974793a312e300000000000000c4174"
"74725175616c69747900000000030000000b415454525f56414c494400000000000d415454525"
"f494e56414c4944000f4c700000000b415454525f414c41524d00000000000574696d65000c46"
"f80000000f00000060000000010000001649444c3a54616e676f2f54696d6556616c3a312e300"
"053300000000854696d6556616c00000000030000000774765f73656300ff0000000300000008"
"74765f7573656300000000030000000874765f6e7365630000000003000000056e616d6500089"
"f3000000012000000000000000664696d5f78003910000000030000000664696d5f7900533000"
"000003"
);

OB::TypeCodeConst _tc_AttributeConfigList(
"000000000000001500000378000c6fe80000002249444c3a54616e676f2f41747472696275746"
"5436f6e6669674c6973743a312e3000cc1800000014417474726962757465436f6e6669674c69"
"737400000000130000032c000f48300000000f0000031c000c6fb00000001e49444c3a54616e6"
"76f2f417474726962757465436f6e6669673a312e300000010000001041747472696275746543"
"6f6e6669670000000012000000056e616d65000e5bc8000000120000000000000009777269746"
"1626c6500195ffc0000001100000077000000010000001c49444c3a54616e676f2f4174747257"
"72697465547970653a312e30000000000e4174747257726974655479706500ff0000000004000"
"000055245414400bee66000000010524541445f574954485f5752495445000000000657524954"
"450000000000000b524541445f575249544500fd0000000c646174615f666f726d61740000000"
"01100000066000939100000001d49444c3a54616e676f2f4174747244617461466f726d61743a"
"312e3000052be00000000f4174747244617461466f726d617400ff00000003000000075343414"
"c415200e800000009535045435452554d00bee68000000006494d414745006fa80000000a6461"
"74615f7479706500ec90000000030000000a6d61785f64696d5f7800e180000000030000000a6"
"d61785f64696d5f79000001000000030000000c6465736372697074696f6e0000000012000000"
"00000000066c6162656c00a764000000120000000000000005756e697400bee6f800000012000"
"000000000000e7374616e646172645f756e697400736000000012000000000000000d64697370"
"6c61795f756e697400fefeff000000120000000000000007666f726d6174004e0000001200000"
"0000000000a6d696e5f76616c756500003900000012000000000000000a6d61785f76616c7565"
"00732c00000012000000000000000a6d696e5f616c61726d00000000000012000000000000000"
"a6d61785f616c61726d003df00000001200000000000000137772697461626c655f617474725f"
"6e616d65006e00000012000000000000000b657874656e73696f6e73000000000015000000580"
"02f436f0000002049444c3a54616e676f2f446576566172537472696e6741727261793a312e30"
"0000000012446576566172537472696e674172726179000000000000130000001000bee8b8000"
"00012000000000000000000000000"
);

OB::TypeCodeConst _tc_AttributeValueList(
"0000000000000015000001d4000c71c80000002149444c3a54616e676f2f41747472696275746"
"556616c75654c6973743a312e300000cc180000001341747472696275746556616c75654c6973"
"7400000000001300000188000f48300000000f00000178000c71900000001d49444c3a54616e6"
"76f2f41747472696275746556616c75653a312e30000000010000000f41747472696275746556"
"616c75650000000000060000000676616c756500be740000000b000000087175616c697479000"
"00000110000006b000000110000001a49444c3a54616e676f2f417474725175616c6974793a31"
"2e300000010000000c417474725175616c69747900000000030000000b415454525f56414c494"
"400b80000000d415454525f494e56414c494400bee5d00000000b415454525f414c41524d00d8"
"0000000574696d6500dec5240000000f00000060000000040000001649444c3a54616e676f2f5"
"4696d6556616c3a312e30009f300000000854696d6556616c00000000030000000774765f7365"
"6300d8000000030000000874765f7573656300000000030000000874765f6e736563000000000"
"3000000056e616d65000e454000000012000000000000000664696d5f78007188000000030000"
"000664696d5f7900ec900000000300000000"
);

OB::TypeCodeConst _tc_DevInfo(
"000000000000000f000000a4000c74280000001649444c3a54616e676f2f446576496e666f3a3"
"12e3000000000000008446576496e666f00000000050000000a6465765f636c617373004c6900"
"000012000000000000000a7365727665725f696400017800000012000000000000000c7365727"
"665725f686f73740000000012000000000000000f7365727665725f76657273696f6e00000000"
"000300000008646f635f75726c000000001200000000"
);

OB::TypeCodeConst _tc_Device(
"000000000000000e0000002b000000000000001549444c3a54616e676f2f4465766963653a312"
"e30000a447c0000000744657669636500"
);

} // End of namespace Tango

//
// IDL:Tango/DevVarFloatArray:1.0
//
void
Tango::OBInfo_DevVarFloatArray::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevVarFloatArray& _ob_seq = *(const Tango::DevVarFloatArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_float_array(_ob_seq.get_buffer(), _ob_len0);
}

void
Tango::OBInfo_DevVarFloatArray::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevVarFloatArray& _ob_seq = *(Tango::DevVarFloatArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    _ob_in -> read_float_array(_ob_seq.get_buffer(), _ob_len0);
}

void
operator<<=(CORBA::Any& any, Tango::DevVarFloatArray* v)
{
    static const Tango::OBInfo_DevVarFloatArray info;
    any.replace(Tango::_tc_DevVarFloatArray, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevVarFloatArray& v)
{
    any <<= new Tango::DevVarFloatArray(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevVarFloatArray*& v)
{
    if(any.check_type(Tango::_tc_DevVarFloatArray))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevVarFloatArray* val = new Tango::DevVarFloatArray;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            _ob_in -> read_float_array((*val).get_buffer(), _ob_len0);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevVarFloatArray*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevVarDoubleArray:1.0
//
void
Tango::OBInfo_DevVarDoubleArray::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevVarDoubleArray& _ob_seq = *(const Tango::DevVarDoubleArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_double_array(_ob_seq.get_buffer(), _ob_len0);
}

void
Tango::OBInfo_DevVarDoubleArray::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevVarDoubleArray& _ob_seq = *(Tango::DevVarDoubleArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    _ob_in -> read_double_array(_ob_seq.get_buffer(), _ob_len0);
}

void
operator<<=(CORBA::Any& any, Tango::DevVarDoubleArray* v)
{
    static const Tango::OBInfo_DevVarDoubleArray info;
    any.replace(Tango::_tc_DevVarDoubleArray, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevVarDoubleArray& v)
{
    any <<= new Tango::DevVarDoubleArray(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevVarDoubleArray*& v)
{
    if(any.check_type(Tango::_tc_DevVarDoubleArray))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevVarDoubleArray* val = new Tango::DevVarDoubleArray;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            _ob_in -> read_double_array((*val).get_buffer(), _ob_len0);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevVarDoubleArray*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevVarShortArray:1.0
//
void
Tango::OBInfo_DevVarShortArray::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevVarShortArray& _ob_seq = *(const Tango::DevVarShortArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_short_array(_ob_seq.get_buffer(), _ob_len0);
}

void
Tango::OBInfo_DevVarShortArray::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevVarShortArray& _ob_seq = *(Tango::DevVarShortArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    _ob_in -> read_short_array(_ob_seq.get_buffer(), _ob_len0);
}

void
operator<<=(CORBA::Any& any, Tango::DevVarShortArray* v)
{
    static const Tango::OBInfo_DevVarShortArray info;
    any.replace(Tango::_tc_DevVarShortArray, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevVarShortArray& v)
{
    any <<= new Tango::DevVarShortArray(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevVarShortArray*& v)
{
    if(any.check_type(Tango::_tc_DevVarShortArray))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevVarShortArray* val = new Tango::DevVarShortArray;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            _ob_in -> read_short_array((*val).get_buffer(), _ob_len0);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevVarShortArray*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevVarLongArray:1.0
//
void
Tango::OBInfo_DevVarLongArray::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevVarLongArray& _ob_seq = *(const Tango::DevVarLongArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_long_array(_ob_seq.get_buffer(), _ob_len0);
}

void
Tango::OBInfo_DevVarLongArray::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevVarLongArray& _ob_seq = *(Tango::DevVarLongArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    _ob_in -> read_long_array(_ob_seq.get_buffer(), _ob_len0);
}

void
operator<<=(CORBA::Any& any, Tango::DevVarLongArray* v)
{
    static const Tango::OBInfo_DevVarLongArray info;
    any.replace(Tango::_tc_DevVarLongArray, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevVarLongArray& v)
{
    any <<= new Tango::DevVarLongArray(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevVarLongArray*& v)
{
    if(any.check_type(Tango::_tc_DevVarLongArray))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevVarLongArray* val = new Tango::DevVarLongArray;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            _ob_in -> read_long_array((*val).get_buffer(), _ob_len0);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevVarLongArray*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevVarCharArray:1.0
//
void
Tango::OBInfo_DevVarCharArray::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevVarCharArray& _ob_seq = *(const Tango::DevVarCharArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_octet_array(_ob_seq.get_buffer(), _ob_len0);
}

void
Tango::OBInfo_DevVarCharArray::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevVarCharArray& _ob_seq = *(Tango::DevVarCharArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    _ob_in -> read_octet_array(_ob_seq.get_buffer(), _ob_len0);
}

void
operator<<=(CORBA::Any& any, Tango::DevVarCharArray* v)
{
    static const Tango::OBInfo_DevVarCharArray info;
    any.replace(Tango::_tc_DevVarCharArray, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevVarCharArray& v)
{
    any <<= new Tango::DevVarCharArray(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevVarCharArray*& v)
{
    if(any.check_type(Tango::_tc_DevVarCharArray))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevVarCharArray* val = new Tango::DevVarCharArray;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            _ob_in -> read_octet_array((*val).get_buffer(), _ob_len0);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevVarCharArray*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevVarStringArray:1.0
//
void
Tango::OBInfo_DevVarStringArray::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevVarStringArray& _ob_seq = *(const Tango::DevVarStringArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    const char* const *_ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_out -> write_string(_ob_buf0[_ob_i0]);
    }
}

void
Tango::OBInfo_DevVarStringArray::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevVarStringArray& _ob_seq = *(Tango::DevVarStringArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    char* * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        CORBA::string_free(_ob_buf0[_ob_i0]);
        _ob_buf0[_ob_i0] = 0;
        _ob_buf0[_ob_i0] = _ob_in -> read_string();
    }
}

void
operator<<=(CORBA::Any& any, Tango::DevVarStringArray* v)
{
    static const Tango::OBInfo_DevVarStringArray info;
    any.replace(Tango::_tc_DevVarStringArray, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevVarStringArray& v)
{
    any <<= new Tango::DevVarStringArray(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevVarStringArray*& v)
{
    if(any.check_type(Tango::_tc_DevVarStringArray))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevVarStringArray* val = new Tango::DevVarStringArray;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            char* * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                CORBA::string_free(_ob_buf0[_ob_i0]);
                _ob_buf0[_ob_i0] = 0;
                _ob_buf0[_ob_i0] = _ob_in -> read_string();
            }
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevVarStringArray*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevVarUShortArray:1.0
//
void
Tango::OBInfo_DevVarUShortArray::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevVarUShortArray& _ob_seq = *(const Tango::DevVarUShortArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_ushort_array(_ob_seq.get_buffer(), _ob_len0);
}

void
Tango::OBInfo_DevVarUShortArray::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevVarUShortArray& _ob_seq = *(Tango::DevVarUShortArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    _ob_in -> read_ushort_array(_ob_seq.get_buffer(), _ob_len0);
}

void
operator<<=(CORBA::Any& any, Tango::DevVarUShortArray* v)
{
    static const Tango::OBInfo_DevVarUShortArray info;
    any.replace(Tango::_tc_DevVarUShortArray, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevVarUShortArray& v)
{
    any <<= new Tango::DevVarUShortArray(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevVarUShortArray*& v)
{
    if(any.check_type(Tango::_tc_DevVarUShortArray))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevVarUShortArray* val = new Tango::DevVarUShortArray;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            _ob_in -> read_ushort_array((*val).get_buffer(), _ob_len0);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevVarUShortArray*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevVarULongArray:1.0
//
void
Tango::OBInfo_DevVarULongArray::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevVarULongArray& _ob_seq = *(const Tango::DevVarULongArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_ulong_array(_ob_seq.get_buffer(), _ob_len0);
}

void
Tango::OBInfo_DevVarULongArray::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevVarULongArray& _ob_seq = *(Tango::DevVarULongArray*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    _ob_in -> read_ulong_array(_ob_seq.get_buffer(), _ob_len0);
}

void
operator<<=(CORBA::Any& any, Tango::DevVarULongArray* v)
{
    static const Tango::OBInfo_DevVarULongArray info;
    any.replace(Tango::_tc_DevVarULongArray, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevVarULongArray& v)
{
    any <<= new Tango::DevVarULongArray(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevVarULongArray*& v)
{
    if(any.check_type(Tango::_tc_DevVarULongArray))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevVarULongArray* val = new Tango::DevVarULongArray;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            _ob_in -> read_ulong_array((*val).get_buffer(), _ob_len0);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevVarULongArray*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevVarLongStringArray:1.0
//
Tango::DevVarLongStringArray::DevVarLongStringArray(const DevVarLongStringArray& _ob_a)
    : lvalue(_ob_a.lvalue),
      svalue(_ob_a.svalue)
{
}

Tango::DevVarLongStringArray&
Tango::DevVarLongStringArray::operator=(const DevVarLongStringArray& _ob_a)
{
    if(this != &_ob_a)
    {
        lvalue = _ob_a.lvalue;
        svalue = _ob_a.svalue;
    }
    return *this;
}

void
Tango::DevVarLongStringArray::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    CORBA::ULong _ob_len0 = lvalue.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_long_array(lvalue.get_buffer(), _ob_len0);
    CORBA::ULong _ob_len1 = svalue.length();
    _ob_out -> write_ulong(_ob_len1);
    const char* const *_ob_buf1 = svalue.get_buffer();
    for(CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
    {
        _ob_out -> write_string(_ob_buf1[_ob_i1]);
    }
}

void
Tango::DevVarLongStringArray::_OB_unmarshal(DevVarLongStringArray& _ob_v, OB::InputStreamImpl* _ob_in)
{
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_v.lvalue.length(_ob_len0);
    _ob_in -> read_long_array(_ob_v.lvalue.get_buffer(), _ob_len0);
    CORBA::ULong _ob_len1 = _ob_in -> read_ulong();
    _ob_v.svalue.length(_ob_len1);
    char* * _ob_buf1 = _ob_v.svalue.get_buffer();
    for(CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
    {
        CORBA::string_free(_ob_buf1[_ob_i1]);
        _ob_buf1[_ob_i1] = 0;
        _ob_buf1[_ob_i1] = _ob_in -> read_string();
    }
}

void
operator<<=(CORBA::Any& any, Tango::DevVarLongStringArray* v)
{
    static const OB::Info< Tango::DevVarLongStringArray > info;
    any.replace(Tango::_tc_DevVarLongStringArray, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevVarLongStringArray& v)
{
    any <<= new Tango::DevVarLongStringArray(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevVarLongStringArray*& v)
{
    if(any.check_type(Tango::_tc_DevVarLongStringArray))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::DevVarLongStringArray* val = new Tango::DevVarLongStringArray;
            Tango::DevVarLongStringArray::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevVarLongStringArray*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevVarDoubleStringArray:1.0
//
Tango::DevVarDoubleStringArray::DevVarDoubleStringArray(const DevVarDoubleStringArray& _ob_a)
    : dvalue(_ob_a.dvalue),
      svalue(_ob_a.svalue)
{
}

Tango::DevVarDoubleStringArray&
Tango::DevVarDoubleStringArray::operator=(const DevVarDoubleStringArray& _ob_a)
{
    if(this != &_ob_a)
    {
        dvalue = _ob_a.dvalue;
        svalue = _ob_a.svalue;
    }
    return *this;
}

void
Tango::DevVarDoubleStringArray::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    CORBA::ULong _ob_len0 = dvalue.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_double_array(dvalue.get_buffer(), _ob_len0);
    CORBA::ULong _ob_len1 = svalue.length();
    _ob_out -> write_ulong(_ob_len1);
    const char* const *_ob_buf1 = svalue.get_buffer();
    for(CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
    {
        _ob_out -> write_string(_ob_buf1[_ob_i1]);
    }
}

void
Tango::DevVarDoubleStringArray::_OB_unmarshal(DevVarDoubleStringArray& _ob_v, OB::InputStreamImpl* _ob_in)
{
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_v.dvalue.length(_ob_len0);
    _ob_in -> read_double_array(_ob_v.dvalue.get_buffer(), _ob_len0);
    CORBA::ULong _ob_len1 = _ob_in -> read_ulong();
    _ob_v.svalue.length(_ob_len1);
    char* * _ob_buf1 = _ob_v.svalue.get_buffer();
    for(CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
    {
        CORBA::string_free(_ob_buf1[_ob_i1]);
        _ob_buf1[_ob_i1] = 0;
        _ob_buf1[_ob_i1] = _ob_in -> read_string();
    }
}

void
operator<<=(CORBA::Any& any, Tango::DevVarDoubleStringArray* v)
{
    static const OB::Info< Tango::DevVarDoubleStringArray > info;
    any.replace(Tango::_tc_DevVarDoubleStringArray, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevVarDoubleStringArray& v)
{
    any <<= new Tango::DevVarDoubleStringArray(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevVarDoubleStringArray*& v)
{
    if(any.check_type(Tango::_tc_DevVarDoubleStringArray))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::DevVarDoubleStringArray* val = new Tango::DevVarDoubleStringArray;
            Tango::DevVarDoubleStringArray::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevVarDoubleStringArray*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevSecurity:1.0
//
void
Tango::OBInfo_DevSecurity::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevSecurity& _ob_seq = *(const Tango::DevSecurity*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_octet_array(_ob_seq.get_buffer(), _ob_len0);
}

void
Tango::OBInfo_DevSecurity::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevSecurity& _ob_seq = *(Tango::DevSecurity*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    _ob_in -> read_octet_array(_ob_seq.get_buffer(), _ob_len0);
}

void
operator<<=(CORBA::Any& any, Tango::DevSecurity* v)
{
    static const Tango::OBInfo_DevSecurity info;
    any.replace(Tango::_tc_DevSecurity, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevSecurity& v)
{
    any <<= new Tango::DevSecurity(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevSecurity*& v)
{
    if(any.check_type(Tango::_tc_DevSecurity))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevSecurity* val = new Tango::DevSecurity;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            _ob_in -> read_octet_array((*val).get_buffer(), _ob_len0);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevSecurity*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevApplet:1.0
//
void
Tango::OBInfo_DevApplet::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevApplet& _ob_seq = *(const Tango::DevApplet*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_octet_array(_ob_seq.get_buffer(), _ob_len0);
}

void
Tango::OBInfo_DevApplet::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevApplet& _ob_seq = *(Tango::DevApplet*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    _ob_in -> read_octet_array(_ob_seq.get_buffer(), _ob_len0);
}

void
operator<<=(CORBA::Any& any, Tango::DevApplet* v)
{
    static const Tango::OBInfo_DevApplet info;
    any.replace(Tango::_tc_DevApplet, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevApplet& v)
{
    any <<= new Tango::DevApplet(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevApplet*& v)
{
    if(any.check_type(Tango::_tc_DevApplet))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevApplet* val = new Tango::DevApplet;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            _ob_in -> read_octet_array((*val).get_buffer(), _ob_len0);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevApplet*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DeviceList:1.0
//
void
Tango::OBInfo_DeviceList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DeviceList& _ob_seq = *(const Tango::DeviceList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    Tango::Device_ptr const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OBMarshal(_ob_buf0[_ob_i0], _ob_out);
    }
}

void
Tango::OBInfo_DeviceList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DeviceList& _ob_seq = *(Tango::DeviceList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    Tango::Device_ptr * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OBUnmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, Tango::DeviceList* v)
{
    static const Tango::OBInfo_DeviceList info;
    any.replace(Tango::_tc_DeviceList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DeviceList& v)
{
    any <<= new Tango::DeviceList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DeviceList*& v)
{
    if(any.check_type(Tango::_tc_DeviceList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DeviceList* val = new Tango::DeviceList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            Tango::Device_ptr * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                OBUnmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DeviceList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevPriority:1.0
//
void
operator<<=(CORBA::Any& any, Tango::DevPriority v)
{
    any.replace(Tango::_tc_DevPriority, new CORBA::ULong((CORBA::ULong)v), true);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Tango::DevPriority& v)
{
    if(any.check_type(Tango::_tc_DevPriority))
    {
        v = (Tango::DevPriority)(*(CORBA::ULong*)any.value());
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevProtocol:1.0
//
void
operator<<=(CORBA::Any& any, Tango::DevProtocol v)
{
    any.replace(Tango::_tc_DevProtocol, new CORBA::ULong((CORBA::ULong)v), true);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Tango::DevProtocol& v)
{
    if(any.check_type(Tango::_tc_DevProtocol))
    {
        v = (Tango::DevProtocol)(*(CORBA::ULong*)any.value());
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/AttrQuality:1.0
//
void
operator<<=(CORBA::Any& any, Tango::AttrQuality v)
{
    any.replace(Tango::_tc_AttrQuality, new CORBA::ULong((CORBA::ULong)v), true);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Tango::AttrQuality& v)
{
    if(any.check_type(Tango::_tc_AttrQuality))
    {
        v = (Tango::AttrQuality)(*(CORBA::ULong*)any.value());
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/AttrWriteType:1.0
//
void
operator<<=(CORBA::Any& any, Tango::AttrWriteType v)
{
    any.replace(Tango::_tc_AttrWriteType, new CORBA::ULong((CORBA::ULong)v), true);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Tango::AttrWriteType& v)
{
    if(any.check_type(Tango::_tc_AttrWriteType))
    {
        v = (Tango::AttrWriteType)(*(CORBA::ULong*)any.value());
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/AttrDataFormat:1.0
//
void
operator<<=(CORBA::Any& any, Tango::AttrDataFormat v)
{
    any.replace(Tango::_tc_AttrDataFormat, new CORBA::ULong((CORBA::ULong)v), true);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Tango::AttrDataFormat& v)
{
    if(any.check_type(Tango::_tc_AttrDataFormat))
    {
        v = (Tango::AttrDataFormat)(*(CORBA::ULong*)any.value());
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevSource:1.0
//
void
operator<<=(CORBA::Any& any, Tango::DevSource v)
{
    any.replace(Tango::_tc_DevSource, new CORBA::ULong((CORBA::ULong)v), true);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Tango::DevSource& v)
{
    if(any.check_type(Tango::_tc_DevSource))
    {
        v = (Tango::DevSource)(*(CORBA::ULong*)any.value());
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/ErrSeverity:1.0
//
void
operator<<=(CORBA::Any& any, Tango::ErrSeverity v)
{
    any.replace(Tango::_tc_ErrSeverity, new CORBA::ULong((CORBA::ULong)v), true);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Tango::ErrSeverity& v)
{
    if(any.check_type(Tango::_tc_ErrSeverity))
    {
        v = (Tango::ErrSeverity)(*(CORBA::ULong*)any.value());
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevState:1.0
//
void
operator<<=(CORBA::Any& any, Tango::DevState v)
{
    any.replace(Tango::_tc_DevState, new CORBA::ULong((CORBA::ULong)v), true);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Tango::DevState& v)
{
    if(any.check_type(Tango::_tc_DevState))
    {
        v = (Tango::DevState)(*(CORBA::ULong*)any.value());
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/MonitorId:1.0
//
void
operator<<=(CORBA::Any& any, Tango::MonitorId v)
{
    any.replace(Tango::_tc_MonitorId, new CORBA::ULong((CORBA::ULong)v), true);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Tango::MonitorId& v)
{
    if(any.check_type(Tango::_tc_MonitorId))
    {
        v = (Tango::MonitorId)(*(CORBA::ULong*)any.value());
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/TimeVal:1.0
//
void
Tango::TimeVal::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_long(tv_sec);
    _ob_out -> write_long(tv_usec);
    _ob_out -> write_long(tv_nsec);
}

void
Tango::TimeVal::_OB_unmarshal(TimeVal& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.tv_sec = _ob_in -> read_long();
    _ob_v.tv_usec = _ob_in -> read_long();
    _ob_v.tv_nsec = _ob_in -> read_long();
}

void
operator<<=(CORBA::Any& any, Tango::TimeVal* v)
{
    static const OB::Info< Tango::TimeVal > info;
    any.replace(Tango::_tc_TimeVal, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::TimeVal& v)
{
    any <<= new Tango::TimeVal(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::TimeVal*& v)
{
    if(any.check_type(Tango::_tc_TimeVal))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::TimeVal* val = new Tango::TimeVal;
            Tango::TimeVal::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::TimeVal*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/ReportingClockInfo:1.0
//
void
Tango::ReportingClockInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    elapsed._OB_marshal(_ob_out);
    tick_size._OB_marshal(_ob_out);
    _ob_out -> write_ulong(tick_number);
}

void
Tango::ReportingClockInfo::_OB_unmarshal(ReportingClockInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    TimeVal::_OB_unmarshal(_ob_v.elapsed, _ob_in);
    TimeVal::_OB_unmarshal(_ob_v.tick_size, _ob_in);
    _ob_v.tick_number = _ob_in -> read_ulong();
}

void
operator<<=(CORBA::Any& any, Tango::ReportingClockInfo* v)
{
    static const OB::Info< Tango::ReportingClockInfo > info;
    any.replace(Tango::_tc_ReportingClockInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::ReportingClockInfo& v)
{
    any <<= new Tango::ReportingClockInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::ReportingClockInfo*& v)
{
    if(any.check_type(Tango::_tc_ReportingClockInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::ReportingClockInfo* val = new Tango::ReportingClockInfo;
            Tango::ReportingClockInfo::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::ReportingClockInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/ReportingEventInfo:1.0
//
#ifdef OB_CLEAR_MEM
Tango::ReportingEventInfo::ReportingEventInfo()
{
    memset(&stamp, 0, sizeof(stamp));
    memset(&event_id, 0, sizeof(event_id));
}
#endif

Tango::ReportingEventInfo::ReportingEventInfo(const ReportingEventInfo& _ob_a)
    : stamp(_ob_a.stamp),
      event_id(_ob_a.event_id),
      param(_ob_a.param)
{
}

Tango::ReportingEventInfo&
Tango::ReportingEventInfo::operator=(const ReportingEventInfo& _ob_a)
{
    if(this != &_ob_a)
    {
        stamp = _ob_a.stamp;
        event_id = _ob_a.event_id;
        param = _ob_a.param;
    }
    return *this;
}

void
Tango::ReportingEventInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    stamp._OB_marshal(_ob_out);
    _ob_out -> write_long(event_id);
    CORBA::ULong _ob_len0 = param.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_octet_array(param.get_buffer(), _ob_len0);
}

void
Tango::ReportingEventInfo::_OB_unmarshal(ReportingEventInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    TimeVal::_OB_unmarshal(_ob_v.stamp, _ob_in);
    _ob_v.event_id = _ob_in -> read_long();
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_v.param.length(_ob_len0);
    _ob_in -> read_octet_array(_ob_v.param.get_buffer(), _ob_len0);
}

void
operator<<=(CORBA::Any& any, Tango::ReportingEventInfo* v)
{
    static const OB::Info< Tango::ReportingEventInfo > info;
    any.replace(Tango::_tc_ReportingEventInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::ReportingEventInfo& v)
{
    any <<= new Tango::ReportingEventInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::ReportingEventInfo*& v)
{
    if(any.check_type(Tango::_tc_ReportingEventInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::ReportingEventInfo* val = new Tango::ReportingEventInfo;
            Tango::ReportingEventInfo::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::ReportingEventInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/MonitorData:1.0
//
void
Tango::MonitorData::_OB_remove()
{
    if(_ob_i_)
    {
        switch(_ob_d_)
        {
        case REPORTING_CLOCK:
            break;

        case REPORTING_EVENT:
            delete _ob_v_.rep_event_info;
            break;

        default:
            CORBA::string_free(_ob_v_.cb_reason);
            break;
        }

        _ob_i_ = false;
    }
}

bool
Tango::MonitorData::_OB_check(MonitorId _ob_d) const
{
    assert_nca(_ob_i_, OB::NCAUnionInit);

    MonitorId d[2];
    d[0] = _ob_d;
    d[1] = _ob_d_;

    for(int i = 0 ; i < 2 ; i++)
    {
        switch(d[i])
        {
        case REPORTING_CLOCK:
            break;

        case REPORTING_EVENT:
            break;

        default:
            d[i] = REPORTING_SIGNAL;
            break;
        }
    }

    return d[0] == d[1];
}

#ifdef OB_CLEAR_MEM
Tango::MonitorData::MonitorData()
    : _ob_i_(false)
{
    memset(&_ob_v_, 0, sizeof(_ob_v_));
    memset(&_ob_d_, 0, sizeof(_ob_d_));
}
#endif

Tango::MonitorData::MonitorData(const MonitorData& _ob_a)
    : _ob_i_(false)
{
    *this = _ob_a;
}

Tango::MonitorData&
Tango::MonitorData::operator=(const MonitorData& _ob_a)
{
    if(this != &_ob_a)
    {
        _OB_remove();

        if(_ob_a._ob_i_)
        {
            _ob_i_ = true;
            _ob_d_ = _ob_a._ob_d_;

            switch(_ob_d_)
            {
            case REPORTING_CLOCK:
            {
                _ob_v_.rep_clock_info = _ob_a._ob_v_.rep_clock_info;
                break;
            }

            case REPORTING_EVENT:
            {
                _ob_v_.rep_event_info = new ReportingEventInfo(*_ob_a._ob_v_.rep_event_info);
                break;
            }

            default:
            {
                _ob_v_.cb_reason = CORBA::string_dup(_ob_a._ob_v_.cb_reason);
                break;
            }
            }
        }
    }

    return *this;
}

void
Tango::MonitorData::_d(MonitorId _ob_d)
{
    assert_nca(_OB_check(_ob_d), OB::NCADiscMismatch);
    _ob_d_ = _ob_d;
}

Tango::MonitorId
Tango::MonitorData::_d() const
{
    assert_nca(_ob_i_, OB::NCAUnionInit);
    return _ob_d_;
}

void
Tango::MonitorData::rep_clock_info(const ReportingClockInfo& _ob_a)
{
    _OB_remove();
    _ob_i_ = true;
    _ob_d_ = REPORTING_CLOCK;
    _ob_v_.rep_clock_info = _ob_a;
}

const Tango::ReportingClockInfo&
Tango::MonitorData::rep_clock_info() const
{
    assert_nca(_OB_check(REPORTING_CLOCK), OB::NCADiscMismatch);
    return _ob_v_.rep_clock_info;
}

Tango::ReportingClockInfo&
Tango::MonitorData::rep_clock_info()
{
    assert_nca(_OB_check(REPORTING_CLOCK), OB::NCADiscMismatch);
    return _ob_v_.rep_clock_info;
}

void
Tango::MonitorData::rep_event_info(const ReportingEventInfo& _ob_a)
{
    _OB_remove();
    _ob_i_ = true;
    _ob_d_ = REPORTING_EVENT;
    _ob_v_.rep_event_info = new ReportingEventInfo(_ob_a);
}

const Tango::ReportingEventInfo&
Tango::MonitorData::rep_event_info() const
{
    assert_nca(_OB_check(REPORTING_EVENT), OB::NCADiscMismatch);
    return *_ob_v_.rep_event_info;
}

Tango::ReportingEventInfo&
Tango::MonitorData::rep_event_info()
{
    assert_nca(_OB_check(REPORTING_EVENT), OB::NCADiscMismatch);
    return *_ob_v_.rep_event_info;
}

void
Tango::MonitorData::cb_reason(char* _ob_a)
{
    _OB_remove();
    _ob_i_ = true;
    _ob_d_ = REPORTING_SIGNAL;
    _ob_v_.cb_reason = _ob_a;
}

void
Tango::MonitorData::cb_reason(const char* _ob_a)
{
    _OB_remove();
    _ob_i_ = true;
    _ob_d_ = REPORTING_SIGNAL;
    _ob_v_.cb_reason = CORBA::string_dup(_ob_a);
}

void
Tango::MonitorData::cb_reason(const CORBA::String_var& _ob_a)
{
    _OB_remove();
    _ob_i_ = true;
    _ob_d_ = REPORTING_SIGNAL;
    _ob_v_.cb_reason = CORBA::string_dup(_ob_a);
}

const char*
Tango::MonitorData::cb_reason() const
{
    assert_nca(_OB_check(REPORTING_SIGNAL), OB::NCADiscMismatch);
    return _ob_v_.cb_reason;
}

void
Tango::MonitorData::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    assert_nca(_ob_i_, OB::NCAUnionInit);
    _ob_out -> write_ulong((CORBA::ULong)_ob_d_);

    switch(_ob_d_)
    {
    case REPORTING_CLOCK:
    {
        _ob_v_.rep_clock_info._OB_marshal(_ob_out);
        break;
    }

    case REPORTING_EVENT:
    {
        (*_ob_v_.rep_event_info)._OB_marshal(_ob_out);
        break;
    }

    default:
    {
        _ob_out -> write_string(_ob_v_.cb_reason);
        break;
    }
    }
}

void
Tango::MonitorData::_OB_unmarshal(MonitorData& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v._OB_remove();

    _ob_v._ob_i_ = true;
    _ob_v._ob_d_ = (MonitorId)_ob_in -> read_ulong();

    switch(_ob_v._ob_d_)
    {
    case REPORTING_CLOCK:
    {
        ReportingClockInfo::_OB_unmarshal(_ob_v._ob_v_.rep_clock_info, _ob_in);
        break;
    }

    case REPORTING_EVENT:
    {
        _ob_v._ob_v_.rep_event_info = new ReportingEventInfo;
        ReportingEventInfo::_OB_unmarshal(*_ob_v._ob_v_.rep_event_info, _ob_in);
        break;
    }

    default:
    {
        _ob_v._ob_v_.cb_reason = _ob_in -> read_string();
        break;
    }
    }
}

void
operator<<=(CORBA::Any& any, Tango::MonitorData* v)
{
    static const OB::Info< Tango::MonitorData > info;
    any.replace(Tango::_tc_MonitorData, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::MonitorData& v)
{
    any <<= new Tango::MonitorData(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::MonitorData*& v)
{
    if(any.check_type(Tango::_tc_MonitorData))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::MonitorData* val = new Tango::MonitorData;
            Tango::MonitorData::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::MonitorData*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/MonitorInfo:1.0
//
#ifdef OB_CLEAR_MEM
Tango::MonitorInfo::MonitorInfo()
{
    memset(&monitor_id, 0, sizeof(monitor_id));
}
#endif

Tango::MonitorInfo::MonitorInfo(const MonitorInfo& _ob_a)
    : monitor_id(_ob_a.monitor_id),
      mon_data(_ob_a.mon_data)
{
}

Tango::MonitorInfo&
Tango::MonitorInfo::operator=(const MonitorInfo& _ob_a)
{
    if(this != &_ob_a)
    {
        monitor_id = _ob_a.monitor_id;
        mon_data = _ob_a.mon_data;
    }
    return *this;
}

void
Tango::MonitorInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_ulong((CORBA::ULong)monitor_id);
    mon_data._OB_marshal(_ob_out);
}

void
Tango::MonitorInfo::_OB_unmarshal(MonitorInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.monitor_id = (MonitorId)_ob_in -> read_ulong();
    MonitorData::_OB_unmarshal(_ob_v.mon_data, _ob_in);
}

void
operator<<=(CORBA::Any& any, Tango::MonitorInfo* v)
{
    static const OB::Info< Tango::MonitorInfo > info;
    any.replace(Tango::_tc_MonitorInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::MonitorInfo& v)
{
    any <<= new Tango::MonitorInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::MonitorInfo*& v)
{
    if(any.check_type(Tango::_tc_MonitorInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::MonitorInfo* val = new Tango::MonitorInfo;
            Tango::MonitorInfo::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::MonitorInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/CallBack:1.0
//
const char* Tango::CallBack::ids_[] =
{
    "IDL:Tango/CallBack:1.0",
    0
};

OB::MarshalStubImpl_ptr
Tango::CallBack::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_Tango::CallBack;
}

void
OBDuplicate(Tango::CallBack_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(Tango::CallBack_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

Tango::CallBack_ptr
Tango::CallBack::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CallBack_ptr v = dynamic_cast<CallBack_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            CallBack_ptr val = new CallBack;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

Tango::CallBack_ptr
Tango::CallBack::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

const char**
Tango::CallBack::_OB_ids() const
{
    return ids_;
}

const char**
Tango::CallBack::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(Tango::CallBack_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(Tango::CallBack_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    Tango::CallBack_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        _ob_v = new Tango::CallBack;
        _ob_v -> _OB_copyFrom(p);
    }
    else
        _ob_v = Tango::CallBack::_nil();
}

void
operator<<=(CORBA::Any& any, Tango::CallBack_ptr* v)
{
    any.replace(Tango::_tc_CallBack, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Tango::CallBack_ptr v)
{
    Tango::CallBack_ptr val = Tango::CallBack::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Tango::CallBack_ptr& v)
{
    if(any.check_type(Tango::_tc_CallBack))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<Tango::CallBack_ptr>(val)))
            {
                v = new Tango::CallBack;
                v -> _OB_copyFrom(val);
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = Tango::CallBack::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevCallBackData:1.0
//
#ifdef OB_CLEAR_MEM
Tango::DevCallBackData::DevCallBackData()
{
    memset(&cb_id, 0, sizeof(cb_id));
    memset(&status, 0, sizeof(status));
    memset(&time, 0, sizeof(time));
}
#endif

Tango::DevCallBackData::DevCallBackData(const DevCallBackData& _ob_a)
    : cb_id(_ob_a.cb_id),
      argout(_ob_a.argout),
      status(_ob_a.status),
      time(_ob_a.time)
{
}

Tango::DevCallBackData&
Tango::DevCallBackData::operator=(const DevCallBackData& _ob_a)
{
    if(this != &_ob_a)
    {
        cb_id = _ob_a.cb_id;
        argout = _ob_a.argout;
        status = _ob_a.status;
        time = _ob_a.time;
    }
    return *this;
}

void
Tango::DevCallBackData::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_long(cb_id);
    _ob_out -> write_any(argout);
    _ob_out -> write_long(status);
    time._OB_marshal(_ob_out);
}

void
Tango::DevCallBackData::_OB_unmarshal(DevCallBackData& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.cb_id = _ob_in -> read_long();
    _ob_in -> read_any(_ob_v.argout);
    _ob_v.status = _ob_in -> read_long();
    TimeVal::_OB_unmarshal(_ob_v.time, _ob_in);
}

void
operator<<=(CORBA::Any& any, Tango::DevCallBackData* v)
{
    static const OB::Info< Tango::DevCallBackData > info;
    any.replace(Tango::_tc_DevCallBackData, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevCallBackData& v)
{
    any <<= new Tango::DevCallBackData(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevCallBackData*& v)
{
    if(any.check_type(Tango::_tc_DevCallBackData))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::DevCallBackData* val = new Tango::DevCallBackData;
            Tango::DevCallBackData::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevCallBackData*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevCallBackDataList:1.0
//
void
Tango::OBInfo_DevCallBackDataList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevCallBackDataList& _ob_seq = *(const Tango::DevCallBackDataList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    Tango::DevCallBackData const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
Tango::OBInfo_DevCallBackDataList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevCallBackDataList& _ob_seq = *(Tango::DevCallBackDataList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    Tango::DevCallBackData * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        Tango::DevCallBackData::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, Tango::DevCallBackDataList* v)
{
    static const Tango::OBInfo_DevCallBackDataList info;
    any.replace(Tango::_tc_DevCallBackDataList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevCallBackDataList& v)
{
    any <<= new Tango::DevCallBackDataList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevCallBackDataList*& v)
{
    if(any.check_type(Tango::_tc_DevCallBackDataList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevCallBackDataList* val = new Tango::DevCallBackDataList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            Tango::DevCallBackData * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                Tango::DevCallBackData::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevCallBackDataList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevCallBackInfo:1.0
//
Tango::DevCallBackInfo::DevCallBackInfo(const DevCallBackInfo& _ob_a)
    : cb_data(_ob_a.cb_data),
      user_data(_ob_a.user_data)
{
}

Tango::DevCallBackInfo&
Tango::DevCallBackInfo::operator=(const DevCallBackInfo& _ob_a)
{
    if(this != &_ob_a)
    {
        cb_data = _ob_a.cb_data;
        user_data = _ob_a.user_data;
    }
    return *this;
}

void
Tango::DevCallBackInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    cb_data._OB_marshal(_ob_out);
    _ob_out -> write_any(user_data);
}

void
Tango::DevCallBackInfo::_OB_unmarshal(DevCallBackInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    DevCallBackData::_OB_unmarshal(_ob_v.cb_data, _ob_in);
    _ob_in -> read_any(_ob_v.user_data);
}

void
operator<<=(CORBA::Any& any, Tango::DevCallBackInfo* v)
{
    static const OB::Info< Tango::DevCallBackInfo > info;
    any.replace(Tango::_tc_DevCallBackInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevCallBackInfo& v)
{
    any <<= new Tango::DevCallBackInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevCallBackInfo*& v)
{
    if(any.check_type(Tango::_tc_DevCallBackInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::DevCallBackInfo* val = new Tango::DevCallBackInfo;
            Tango::DevCallBackInfo::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevCallBackInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevCallBackInfoList:1.0
//
Tango::DevCallBackInfoList::DevCallBackInfoList(const DevCallBackInfoList& _ob_a)
    : cb_data(_ob_a.cb_data),
      user_data(_ob_a.user_data)
{
}

Tango::DevCallBackInfoList&
Tango::DevCallBackInfoList::operator=(const DevCallBackInfoList& _ob_a)
{
    if(this != &_ob_a)
    {
        cb_data = _ob_a.cb_data;
        user_data = _ob_a.user_data;
    }
    return *this;
}

void
Tango::DevCallBackInfoList::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    CORBA::ULong _ob_len0 = cb_data.length();
    _ob_out -> write_ulong(_ob_len0);
    DevCallBackData const * _ob_buf0 = cb_data.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
    _ob_out -> write_any(user_data);
}

void
Tango::DevCallBackInfoList::_OB_unmarshal(DevCallBackInfoList& _ob_v, OB::InputStreamImpl* _ob_in)
{
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_v.cb_data.length(_ob_len0);
    DevCallBackData * _ob_buf0 = _ob_v.cb_data.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        DevCallBackData::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
    _ob_in -> read_any(_ob_v.user_data);
}

void
operator<<=(CORBA::Any& any, Tango::DevCallBackInfoList* v)
{
    static const OB::Info< Tango::DevCallBackInfoList > info;
    any.replace(Tango::_tc_DevCallBackInfoList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevCallBackInfoList& v)
{
    any <<= new Tango::DevCallBackInfoList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevCallBackInfoList*& v)
{
    if(any.check_type(Tango::_tc_DevCallBackInfoList))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::DevCallBackInfoList* val = new Tango::DevCallBackInfoList;
            Tango::DevCallBackInfoList::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevCallBackInfoList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevCmdInfo:1.0
//
#ifdef OB_CLEAR_MEM
Tango::DevCmdInfo::DevCmdInfo()
{
    memset(&cmd_tag, 0, sizeof(cmd_tag));
    memset(&in_type, 0, sizeof(in_type));
    memset(&out_type, 0, sizeof(out_type));
}
#endif

Tango::DevCmdInfo::DevCmdInfo(const DevCmdInfo& _ob_a)
    : cmd_name(_ob_a.cmd_name),
      cmd_tag(_ob_a.cmd_tag),
      in_type(_ob_a.in_type),
      out_type(_ob_a.out_type),
      in_type_desc(_ob_a.in_type_desc),
      out_type_desc(_ob_a.out_type_desc)
{
}

Tango::DevCmdInfo&
Tango::DevCmdInfo::operator=(const DevCmdInfo& _ob_a)
{
    if(this != &_ob_a)
    {
        cmd_name = _ob_a.cmd_name;
        cmd_tag = _ob_a.cmd_tag;
        in_type = _ob_a.in_type;
        out_type = _ob_a.out_type;
        in_type_desc = _ob_a.in_type_desc;
        out_type_desc = _ob_a.out_type_desc;
    }
    return *this;
}

void
Tango::DevCmdInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_string(cmd_name);
    _ob_out -> write_long(cmd_tag);
    _ob_out -> write_long(in_type);
    _ob_out -> write_long(out_type);
    _ob_out -> write_string(in_type_desc);
    _ob_out -> write_string(out_type_desc);
}

void
Tango::DevCmdInfo::_OB_unmarshal(DevCmdInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.cmd_name = _ob_in -> read_string();
    _ob_v.cmd_tag = _ob_in -> read_long();
    _ob_v.in_type = _ob_in -> read_long();
    _ob_v.out_type = _ob_in -> read_long();
    _ob_v.in_type_desc = _ob_in -> read_string();
    _ob_v.out_type_desc = _ob_in -> read_string();
}

void
operator<<=(CORBA::Any& any, Tango::DevCmdInfo* v)
{
    static const OB::Info< Tango::DevCmdInfo > info;
    any.replace(Tango::_tc_DevCmdInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevCmdInfo& v)
{
    any <<= new Tango::DevCmdInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevCmdInfo*& v)
{
    if(any.check_type(Tango::_tc_DevCmdInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::DevCmdInfo* val = new Tango::DevCmdInfo;
            Tango::DevCmdInfo::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevCmdInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevCmdInfoList:1.0
//
void
Tango::OBInfo_DevCmdInfoList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevCmdInfoList& _ob_seq = *(const Tango::DevCmdInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    Tango::DevCmdInfo const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
Tango::OBInfo_DevCmdInfoList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevCmdInfoList& _ob_seq = *(Tango::DevCmdInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    Tango::DevCmdInfo * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        Tango::DevCmdInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, Tango::DevCmdInfoList* v)
{
    static const Tango::OBInfo_DevCmdInfoList info;
    any.replace(Tango::_tc_DevCmdInfoList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevCmdInfoList& v)
{
    any <<= new Tango::DevCmdInfoList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevCmdInfoList*& v)
{
    if(any.check_type(Tango::_tc_DevCmdInfoList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevCmdInfoList* val = new Tango::DevCmdInfoList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            Tango::DevCmdInfo * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                Tango::DevCmdInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevCmdInfoList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevError:1.0
//
#ifdef OB_CLEAR_MEM
Tango::DevError::DevError()
{
    memset(&severity, 0, sizeof(severity));
}
#endif

Tango::DevError::DevError(const DevError& _ob_a)
    : reason(_ob_a.reason),
      severity(_ob_a.severity),
      desc(_ob_a.desc),
      origin(_ob_a.origin)
{
}

Tango::DevError&
Tango::DevError::operator=(const DevError& _ob_a)
{
    if(this != &_ob_a)
    {
        reason = _ob_a.reason;
        severity = _ob_a.severity;
        desc = _ob_a.desc;
        origin = _ob_a.origin;
    }
    return *this;
}

void
Tango::DevError::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_string(reason);
    _ob_out -> write_ulong((CORBA::ULong)severity);
    _ob_out -> write_string(desc);
    _ob_out -> write_string(origin);
}

void
Tango::DevError::_OB_unmarshal(DevError& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.reason = _ob_in -> read_string();
    _ob_v.severity = (ErrSeverity)_ob_in -> read_ulong();
    _ob_v.desc = _ob_in -> read_string();
    _ob_v.origin = _ob_in -> read_string();
}

void
operator<<=(CORBA::Any& any, Tango::DevError* v)
{
    static const OB::Info< Tango::DevError > info;
    any.replace(Tango::_tc_DevError, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevError& v)
{
    any <<= new Tango::DevError(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevError*& v)
{
    if(any.check_type(Tango::_tc_DevError))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::DevError* val = new Tango::DevError;
            Tango::DevError::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevError*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevErrorList:1.0
//
void
Tango::OBInfo_DevErrorList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::DevErrorList& _ob_seq = *(const Tango::DevErrorList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    Tango::DevError const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
Tango::OBInfo_DevErrorList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::DevErrorList& _ob_seq = *(Tango::DevErrorList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    Tango::DevError * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        Tango::DevError::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, Tango::DevErrorList* v)
{
    static const Tango::OBInfo_DevErrorList info;
    any.replace(Tango::_tc_DevErrorList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevErrorList& v)
{
    any <<= new Tango::DevErrorList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevErrorList*& v)
{
    if(any.check_type(Tango::_tc_DevErrorList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::DevErrorList* val = new Tango::DevErrorList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            Tango::DevError * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                Tango::DevError::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevErrorList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevFailed:1.0
//
Tango::DevFailed::DevFailed(const DevFailed& _ob_a)
    : CORBA::UserException(_ob_a),
      errors(_ob_a.errors)
{
}

Tango::DevFailed::DevFailed(const DevErrorList& _ob_a0)
    : errors(_ob_a0)
{
}

Tango::DevFailed&
Tango::DevFailed::operator=(const DevFailed& _ob_a)
{
    if(this != &_ob_a)
    {
        errors = _ob_a.errors;
    }
    return *this;
}

Tango::DevFailed*
Tango::DevFailed::_downcast(CORBA::Exception* p)
{
    return dynamic_cast<DevFailed*>(p);
}

const Tango::DevFailed*
Tango::DevFailed::_downcast(const CORBA::Exception* p)
{
    return dynamic_cast<const DevFailed*>(p);
}

const char*
Tango::DevFailed::_name() const
{
    return "DevFailed";
}

const char*
Tango::DevFailed::_rep_id() const
{
    return "IDL:Tango/DevFailed:1.0";
}

char*
Tango::DevFailed::_to_string() const
{
    return _OB_defaultToString("Tango::DevFailed");
}

CORBA::Exception*
Tango::DevFailed::_OB_clone() const
{
    return new DevFailed(*this);
}

void
Tango::DevFailed::_OB_insertInAny(CORBA::Any& any)
{
    any <<= this;
}

void
Tango::DevFailed::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
#ifdef HAVE_VCPLUSPLUS_BUGS
    UserException::_OB_marshal(_ob_out);
#else
    CORBA::UserException::_OB_marshal(_ob_out);
#endif
    CORBA::ULong _ob_len0 = errors.length();
    _ob_out -> write_ulong(_ob_len0);
    DevError const * _ob_buf0 = errors.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
Tango::DevFailed::_OB_unmarshal(DevFailed& _ob_v, OB::InputStreamImpl* _ob_in)
{
    CORBA::String_var id = _ob_in -> read_string();
    assert(strcmp(id, "IDL:Tango/DevFailed:1.0") == 0);
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_v.errors.length(_ob_len0);
    DevError * _ob_buf0 = _ob_v.errors.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        DevError::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, Tango::DevFailed* v)
{
    static const OB::Info< Tango::DevFailed > info;
    any.replace(Tango::_tc_DevFailed, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevFailed& v)
{
    any <<= new Tango::DevFailed(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevFailed*& v)
{
    if(any.check_type(Tango::_tc_DevFailed))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::DevFailed* val = new Tango::DevFailed;
            Tango::DevFailed::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevFailed*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/AttributeConfig:1.0
//
#ifdef OB_CLEAR_MEM
Tango::AttributeConfig::AttributeConfig()
{
    memset(&writable, 0, sizeof(writable));
    memset(&data_format, 0, sizeof(data_format));
    memset(&data_type, 0, sizeof(data_type));
    memset(&max_dim_x, 0, sizeof(max_dim_x));
    memset(&max_dim_y, 0, sizeof(max_dim_y));
}
#endif

Tango::AttributeConfig::AttributeConfig(const AttributeConfig& _ob_a)
    : name(_ob_a.name),
      writable(_ob_a.writable),
      data_format(_ob_a.data_format),
      data_type(_ob_a.data_type),
      max_dim_x(_ob_a.max_dim_x),
      max_dim_y(_ob_a.max_dim_y),
      description(_ob_a.description),
      label(_ob_a.label),
      unit(_ob_a.unit),
      standard_unit(_ob_a.standard_unit),
      display_unit(_ob_a.display_unit),
      format(_ob_a.format),
      min_value(_ob_a.min_value),
      max_value(_ob_a.max_value),
      min_alarm(_ob_a.min_alarm),
      max_alarm(_ob_a.max_alarm),
      writable_attr_name(_ob_a.writable_attr_name),
      extensions(_ob_a.extensions)
{
}

Tango::AttributeConfig&
Tango::AttributeConfig::operator=(const AttributeConfig& _ob_a)
{
    if(this != &_ob_a)
    {
        name = _ob_a.name;
        writable = _ob_a.writable;
        data_format = _ob_a.data_format;
        data_type = _ob_a.data_type;
        max_dim_x = _ob_a.max_dim_x;
        max_dim_y = _ob_a.max_dim_y;
        description = _ob_a.description;
        label = _ob_a.label;
        unit = _ob_a.unit;
        standard_unit = _ob_a.standard_unit;
        display_unit = _ob_a.display_unit;
        format = _ob_a.format;
        min_value = _ob_a.min_value;
        max_value = _ob_a.max_value;
        min_alarm = _ob_a.min_alarm;
        max_alarm = _ob_a.max_alarm;
        writable_attr_name = _ob_a.writable_attr_name;
        extensions = _ob_a.extensions;
    }
    return *this;
}

void
Tango::AttributeConfig::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_string(name);
    _ob_out -> write_ulong((CORBA::ULong)writable);
    _ob_out -> write_ulong((CORBA::ULong)data_format);
    _ob_out -> write_long(data_type);
    _ob_out -> write_long(max_dim_x);
    _ob_out -> write_long(max_dim_y);
    _ob_out -> write_string(description);
    _ob_out -> write_string(label);
    _ob_out -> write_string(unit);
    _ob_out -> write_string(standard_unit);
    _ob_out -> write_string(display_unit);
    _ob_out -> write_string(format);
    _ob_out -> write_string(min_value);
    _ob_out -> write_string(max_value);
    _ob_out -> write_string(min_alarm);
    _ob_out -> write_string(max_alarm);
    _ob_out -> write_string(writable_attr_name);
    CORBA::ULong _ob_len0 = extensions.length();
    _ob_out -> write_ulong(_ob_len0);
    const char* const *_ob_buf0 = extensions.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_out -> write_string(_ob_buf0[_ob_i0]);
    }
}

void
Tango::AttributeConfig::_OB_unmarshal(AttributeConfig& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.name = _ob_in -> read_string();
    _ob_v.writable = (AttrWriteType)_ob_in -> read_ulong();
    _ob_v.data_format = (AttrDataFormat)_ob_in -> read_ulong();
    _ob_v.data_type = _ob_in -> read_long();
    _ob_v.max_dim_x = _ob_in -> read_long();
    _ob_v.max_dim_y = _ob_in -> read_long();
    _ob_v.description = _ob_in -> read_string();
    _ob_v.label = _ob_in -> read_string();
    _ob_v.unit = _ob_in -> read_string();
    _ob_v.standard_unit = _ob_in -> read_string();
    _ob_v.display_unit = _ob_in -> read_string();
    _ob_v.format = _ob_in -> read_string();
    _ob_v.min_value = _ob_in -> read_string();
    _ob_v.max_value = _ob_in -> read_string();
    _ob_v.min_alarm = _ob_in -> read_string();
    _ob_v.max_alarm = _ob_in -> read_string();
    _ob_v.writable_attr_name = _ob_in -> read_string();
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_v.extensions.length(_ob_len0);
    char* * _ob_buf0 = _ob_v.extensions.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        CORBA::string_free(_ob_buf0[_ob_i0]);
        _ob_buf0[_ob_i0] = 0;
        _ob_buf0[_ob_i0] = _ob_in -> read_string();
    }
}

void
operator<<=(CORBA::Any& any, Tango::AttributeConfig* v)
{
    static const OB::Info< Tango::AttributeConfig > info;
    any.replace(Tango::_tc_AttributeConfig, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::AttributeConfig& v)
{
    any <<= new Tango::AttributeConfig(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::AttributeConfig*& v)
{
    if(any.check_type(Tango::_tc_AttributeConfig))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::AttributeConfig* val = new Tango::AttributeConfig;
            Tango::AttributeConfig::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::AttributeConfig*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/AttributeValue:1.0
//
#ifdef OB_CLEAR_MEM
Tango::AttributeValue::AttributeValue()
{
    memset(&quality, 0, sizeof(quality));
    memset(&time, 0, sizeof(time));
    memset(&dim_x, 0, sizeof(dim_x));
    memset(&dim_y, 0, sizeof(dim_y));
}
#endif

Tango::AttributeValue::AttributeValue(const AttributeValue& _ob_a)
    : value(_ob_a.value),
      quality(_ob_a.quality),
      time(_ob_a.time),
      name(_ob_a.name),
      dim_x(_ob_a.dim_x),
      dim_y(_ob_a.dim_y)
{
}

Tango::AttributeValue&
Tango::AttributeValue::operator=(const AttributeValue& _ob_a)
{
    if(this != &_ob_a)
    {
        value = _ob_a.value;
        quality = _ob_a.quality;
        time = _ob_a.time;
        name = _ob_a.name;
        dim_x = _ob_a.dim_x;
        dim_y = _ob_a.dim_y;
    }
    return *this;
}

void
Tango::AttributeValue::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_any(value);
    _ob_out -> write_ulong((CORBA::ULong)quality);
    time._OB_marshal(_ob_out);
    _ob_out -> write_string(name);
    _ob_out -> write_long(dim_x);
    _ob_out -> write_long(dim_y);
}

void
Tango::AttributeValue::_OB_unmarshal(AttributeValue& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_in -> read_any(_ob_v.value);
    _ob_v.quality = (AttrQuality)_ob_in -> read_ulong();
    TimeVal::_OB_unmarshal(_ob_v.time, _ob_in);
    _ob_v.name = _ob_in -> read_string();
    _ob_v.dim_x = _ob_in -> read_long();
    _ob_v.dim_y = _ob_in -> read_long();
}

void
operator<<=(CORBA::Any& any, Tango::AttributeValue* v)
{
    static const OB::Info< Tango::AttributeValue > info;
    any.replace(Tango::_tc_AttributeValue, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::AttributeValue& v)
{
    any <<= new Tango::AttributeValue(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::AttributeValue*& v)
{
    if(any.check_type(Tango::_tc_AttributeValue))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::AttributeValue* val = new Tango::AttributeValue;
            Tango::AttributeValue::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::AttributeValue*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/AttributeConfigList:1.0
//
void
Tango::OBInfo_AttributeConfigList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::AttributeConfigList& _ob_seq = *(const Tango::AttributeConfigList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    Tango::AttributeConfig const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
Tango::OBInfo_AttributeConfigList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::AttributeConfigList& _ob_seq = *(Tango::AttributeConfigList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    Tango::AttributeConfig * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        Tango::AttributeConfig::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, Tango::AttributeConfigList* v)
{
    static const Tango::OBInfo_AttributeConfigList info;
    any.replace(Tango::_tc_AttributeConfigList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::AttributeConfigList& v)
{
    any <<= new Tango::AttributeConfigList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::AttributeConfigList*& v)
{
    if(any.check_type(Tango::_tc_AttributeConfigList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::AttributeConfigList* val = new Tango::AttributeConfigList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            Tango::AttributeConfig * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                Tango::AttributeConfig::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::AttributeConfigList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/AttributeValueList:1.0
//
void
Tango::OBInfo_AttributeValueList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const Tango::AttributeValueList& _ob_seq = *(const Tango::AttributeValueList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    Tango::AttributeValue const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
Tango::OBInfo_AttributeValueList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    Tango::AttributeValueList& _ob_seq = *(Tango::AttributeValueList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    Tango::AttributeValue * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        Tango::AttributeValue::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, Tango::AttributeValueList* v)
{
    static const Tango::OBInfo_AttributeValueList info;
    any.replace(Tango::_tc_AttributeValueList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::AttributeValueList& v)
{
    any <<= new Tango::AttributeValueList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::AttributeValueList*& v)
{
    if(any.check_type(Tango::_tc_AttributeValueList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            Tango::AttributeValueList* val = new Tango::AttributeValueList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            Tango::AttributeValue * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                Tango::AttributeValue::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::AttributeValueList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/DevInfo:1.0
//
#ifdef OB_CLEAR_MEM
Tango::DevInfo::DevInfo()
{
    memset(&server_version, 0, sizeof(server_version));
}
#endif

Tango::DevInfo::DevInfo(const DevInfo& _ob_a)
    : dev_class(_ob_a.dev_class),
      server_id(_ob_a.server_id),
      server_host(_ob_a.server_host),
      server_version(_ob_a.server_version),
      doc_url(_ob_a.doc_url)
{
}

Tango::DevInfo&
Tango::DevInfo::operator=(const DevInfo& _ob_a)
{
    if(this != &_ob_a)
    {
        dev_class = _ob_a.dev_class;
        server_id = _ob_a.server_id;
        server_host = _ob_a.server_host;
        server_version = _ob_a.server_version;
        doc_url = _ob_a.doc_url;
    }
    return *this;
}

void
Tango::DevInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_string(dev_class);
    _ob_out -> write_string(server_id);
    _ob_out -> write_string(server_host);
    _ob_out -> write_long(server_version);
    _ob_out -> write_string(doc_url);
}

void
Tango::DevInfo::_OB_unmarshal(DevInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.dev_class = _ob_in -> read_string();
    _ob_v.server_id = _ob_in -> read_string();
    _ob_v.server_host = _ob_in -> read_string();
    _ob_v.server_version = _ob_in -> read_long();
    _ob_v.doc_url = _ob_in -> read_string();
}

void
operator<<=(CORBA::Any& any, Tango::DevInfo* v)
{
    static const OB::Info< Tango::DevInfo > info;
    any.replace(Tango::_tc_DevInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const Tango::DevInfo& v)
{
    any <<= new Tango::DevInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const Tango::DevInfo*& v)
{
    if(any.check_type(Tango::_tc_DevInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var in = any.create_input_stream();
            Tango::DevInfo* val = new Tango::DevInfo;
            Tango::DevInfo::_OB_unmarshal(*val, in);
            (CORBA::Any&)any <<= val;
        }

        v = (Tango::DevInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:Tango/Device:1.0
//
const char* Tango::Device::ids_[] =
{
    "IDL:Tango/Device:1.0",
    0
};

OB::MarshalStubImpl_ptr
Tango::Device::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_Tango::Device;
}

void
OBDuplicate(Tango::Device_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(Tango::Device_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

Tango::Device_ptr
Tango::Device::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Device_ptr v = dynamic_cast<Device_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            Device_ptr val = new Device;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

Tango::Device_ptr
Tango::Device::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

const char**
Tango::Device::_OB_ids() const
{
    return ids_;
}

const char**
Tango::Device::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(Tango::Device_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(Tango::Device_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    Tango::Device_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        _ob_v = new Tango::Device;
        _ob_v -> _OB_copyFrom(p);
    }
    else
        _ob_v = Tango::Device::_nil();
}

void
operator<<=(CORBA::Any& any, Tango::Device_ptr* v)
{
    any.replace(Tango::_tc_Device, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Tango::Device_ptr v)
{
    Tango::Device_ptr val = Tango::Device::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Tango::Device_ptr& v)
{
    if(any.check_type(Tango::_tc_Device))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<Tango::Device_ptr>(val)))
            {
                v = new Tango::Device;
                v -> _OB_copyFrom(val);
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = Tango::Device::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:Tango/Device/name:1.0
//
char*
Tango::Device::name()
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            return _ob_stubImpl -> name();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/description:1.0
//
char*
Tango::Device::description()
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            return _ob_stubImpl -> description();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/state:1.0
//
Tango::DevState
Tango::Device::state()
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            return _ob_stubImpl -> state();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/status:1.0
//
char*
Tango::Device::status()
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            return _ob_stubImpl -> status();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/command_inout:1.0
//
CORBA::Any*
Tango::Device::command_inout(const char* _ob_a0,
                             const CORBA::Any& _ob_a1)
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            return _ob_stubImpl -> command_inout(_ob_a0, _ob_a1);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/get_attribute_config:1.0
//
Tango::AttributeConfigList*
Tango::Device::get_attribute_config(const DevVarStringArray& _ob_a0)
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            return _ob_stubImpl -> get_attribute_config(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/set_attribute_config:1.0
//
void
Tango::Device::set_attribute_config(const AttributeConfigList& _ob_a0)
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            _ob_stubImpl -> set_attribute_config(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/read_attributes:1.0
//
Tango::AttributeValueList*
Tango::Device::read_attributes(const DevVarStringArray& _ob_a0)
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            return _ob_stubImpl -> read_attributes(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/write_attributes:1.0
//
void
Tango::Device::write_attributes(const AttributeValueList& _ob_a0)
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            _ob_stubImpl -> write_attributes(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/ping:1.0
//
void
Tango::Device::ping()
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            _ob_stubImpl -> ping();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/black_box:1.0
//
Tango::DevVarStringArray*
Tango::Device::black_box(CORBA::Long _ob_a0)
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            return _ob_stubImpl -> black_box(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/info:1.0
//
Tango::DevInfo*
Tango::Device::info()
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            return _ob_stubImpl -> info();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/command_list_query:1.0
//
Tango::DevCmdInfoList*
Tango::Device::command_list_query()
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            return _ob_stubImpl -> command_list_query();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/Device/command_query:1.0
//
Tango::DevCmdInfo*
Tango::Device::command_query(const char* _ob_a0)
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_Tango::Device_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_Tango::Device_ptr>(_ob_stubImplBase.in());
        try
        {
            return _ob_stubImpl -> command_query(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:Tango/CallBack:1.0
//
void
OBDuplicate(OBStubImpl_Tango::CallBack_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_Tango::CallBack_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:Tango/Device:1.0
//
void
OBDuplicate(OBStubImpl_Tango::Device_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_Tango::Device_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:Tango/Device/name:1.0
//
char*
OBMarshalStubImpl_Tango::Device::name()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_name", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/description:1.0
//
char*
OBMarshalStubImpl_Tango::Device::description()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_description", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/state:1.0
//
Tango::DevState
OBMarshalStubImpl_Tango::Device::state()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_state", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            Tango::DevState _ob_r;
            try
            {
                _ob_r = (Tango::DevState)_ob_in -> read_ulong();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/status:1.0
//
char*
OBMarshalStubImpl_Tango::Device::status()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_status", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/command_inout:1.0
//
CORBA::Any*
OBMarshalStubImpl_Tango::Device::command_inout(const char* _ob_a0,
                                               const CORBA::Any& _ob_a1)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("command_inout", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
                _ob_out -> write_any(_ob_a1);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:Tango/DevFailed:1.0") == 0)
                    {
                        Tango::DevFailed _ob_except;
                        Tango::DevFailed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::Any_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_any();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/get_attribute_config:1.0
//
Tango::AttributeConfigList*
OBMarshalStubImpl_Tango::Device::get_attribute_config(const Tango::DevVarStringArray& _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("get_attribute_config", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                CORBA::ULong _ob_len0 = _ob_a0.length();
                _ob_out -> write_ulong(_ob_len0);
                const char* const *_ob_buf0 = _ob_a0.get_buffer();
                for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                {
                    _ob_out -> write_string(_ob_buf0[_ob_i0]);
                }
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:Tango/DevFailed:1.0") == 0)
                    {
                        Tango::DevFailed _ob_except;
                        Tango::DevFailed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                Tango::AttributeConfigList_var _ob_r;
                try
                {
                    _ob_r = new Tango::AttributeConfigList;
                    CORBA::ULong _ob_len1 = _ob_in -> read_ulong();
                    _ob_r -> length(_ob_len1);
                    Tango::AttributeConfig * _ob_buf1 = _ob_r -> get_buffer();
                    for(CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
                    {
                        Tango::AttributeConfig::_OB_unmarshal(_ob_buf1[_ob_i1], _ob_in);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/set_attribute_config:1.0
//
void
OBMarshalStubImpl_Tango::Device::set_attribute_config(const Tango::AttributeConfigList& _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("set_attribute_config", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                CORBA::ULong _ob_len0 = _ob_a0.length();
                _ob_out -> write_ulong(_ob_len0);
                Tango::AttributeConfig const * _ob_buf0 = _ob_a0.get_buffer();
                for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                {
                    _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
                }
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:Tango/DevFailed:1.0") == 0)
                    {
                        Tango::DevFailed _ob_except;
                        Tango::DevFailed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/read_attributes:1.0
//
Tango::AttributeValueList*
OBMarshalStubImpl_Tango::Device::read_attributes(const Tango::DevVarStringArray& _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("read_attributes", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                CORBA::ULong _ob_len0 = _ob_a0.length();
                _ob_out -> write_ulong(_ob_len0);
                const char* const *_ob_buf0 = _ob_a0.get_buffer();
                for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                {
                    _ob_out -> write_string(_ob_buf0[_ob_i0]);
                }
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:Tango/DevFailed:1.0") == 0)
                    {
                        Tango::DevFailed _ob_except;
                        Tango::DevFailed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                Tango::AttributeValueList_var _ob_r;
                try
                {
                    _ob_r = new Tango::AttributeValueList;
                    CORBA::ULong _ob_len1 = _ob_in -> read_ulong();
                    _ob_r -> length(_ob_len1);
                    Tango::AttributeValue * _ob_buf1 = _ob_r -> get_buffer();
                    for(CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
                    {
                        Tango::AttributeValue::_OB_unmarshal(_ob_buf1[_ob_i1], _ob_in);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/write_attributes:1.0
//
void
OBMarshalStubImpl_Tango::Device::write_attributes(const Tango::AttributeValueList& _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("write_attributes", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                CORBA::ULong _ob_len0 = _ob_a0.length();
                _ob_out -> write_ulong(_ob_len0);
                Tango::AttributeValue const * _ob_buf0 = _ob_a0.get_buffer();
                for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                {
                    _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
                }
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:Tango/DevFailed:1.0") == 0)
                    {
                        Tango::DevFailed _ob_except;
                        Tango::DevFailed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/ping:1.0
//
void
OBMarshalStubImpl_Tango::Device::ping()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("ping", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:Tango/DevFailed:1.0") == 0)
                    {
                        Tango::DevFailed _ob_except;
                        Tango::DevFailed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/black_box:1.0
//
Tango::DevVarStringArray*
OBMarshalStubImpl_Tango::Device::black_box(CORBA::Long _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("black_box", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_long(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:Tango/DevFailed:1.0") == 0)
                    {
                        Tango::DevFailed _ob_except;
                        Tango::DevFailed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                Tango::DevVarStringArray_var _ob_r;
                try
                {
                    _ob_r = new Tango::DevVarStringArray;
                    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
                    _ob_r -> length(_ob_len0);
                    char* * _ob_buf0 = _ob_r -> get_buffer();
                    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                    {
                        CORBA::string_free(_ob_buf0[_ob_i0]);
                        _ob_buf0[_ob_i0] = 0;
                        _ob_buf0[_ob_i0] = _ob_in -> read_string();
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/info:1.0
//
Tango::DevInfo*
OBMarshalStubImpl_Tango::Device::info()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("info", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:Tango/DevFailed:1.0") == 0)
                    {
                        Tango::DevFailed _ob_except;
                        Tango::DevFailed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                Tango::DevInfo_var _ob_r;
                try
                {
                    _ob_r = new Tango::DevInfo;
                    Tango::DevInfo::_OB_unmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/command_list_query:1.0
//
Tango::DevCmdInfoList*
OBMarshalStubImpl_Tango::Device::command_list_query()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("command_list_query", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:Tango/DevFailed:1.0") == 0)
                    {
                        Tango::DevFailed _ob_except;
                        Tango::DevFailed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                Tango::DevCmdInfoList_var _ob_r;
                try
                {
                    _ob_r = new Tango::DevCmdInfoList;
                    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
                    _ob_r -> length(_ob_len0);
                    Tango::DevCmdInfo * _ob_buf0 = _ob_r -> get_buffer();
                    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                    {
                        Tango::DevCmdInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:Tango/Device/command_query:1.0
//
Tango::DevCmdInfo*
OBMarshalStubImpl_Tango::Device::command_query(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("command_query", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:Tango/DevFailed:1.0") == 0)
                    {
                        Tango::DevFailed _ob_except;
                        Tango::DevFailed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                Tango::DevCmdInfo_var _ob_r;
                try
                {
                    _ob_r = new Tango::DevCmdInfo;
                    Tango::DevCmdInfo::_OB_unmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}
