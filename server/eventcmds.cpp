static const char *RcsId = "$Header$";
//+=============================================================================
//
// file :        eventcmds.cpp
//
// description : C++ source for the event commands which are part of
//		 the DServer class.
//
// project :     TANGO events
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.1.2.4  2003/07/17 03:46:46  andy_gotz
// Added new events "on_valid" and "on_state_change"; factorized EventSupplier::detect_and_push_events() method;
// Catching more exceptions when creating EventSupplier, device server will start without Notification service;
// Added AttributeProxy and DbAttribute classes to api; created test programs in test directory
//
// Revision 1.1.2.3  2003/04/15 19:01:55  andy_gotz
// added heartbeat on client and server side; cleaned up cout's
//
// Revision 1.1.2.2  2003/04/13 22:12:17  andy_gotz
// added heartbeat; polling starts automatically on subscription
//
// Revision 1.1.2.1  2003/04/10 11:07:44  andy_gotz
// added event commands to DServer admin object
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file was generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>
#include <eventcmds.h>

namespace Tango
{


//+----------------------------------------------------------------------------
//
// method : 		EventSubscriptionChangeCmd::EventSubscriptionChangeCmd()
// 
// description : 	constructor for the command of the EventTester.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
EventSubscriptionChangeCmd::EventSubscriptionChangeCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc)
:Command(name,in,out,in_desc,out_desc)
{
}
//
//	Constructor without in/out parameters description
//
EventSubscriptionChangeCmd::EventSubscriptionChangeCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		EventSubscriptionChangeCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool EventSubscriptionChangeCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		EventSubscriptionChangeCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *EventSubscriptionChangeCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "EventSubscriptionChangeCmd::execute(): arrived" << endl;

        CORBA::Any *ret = return_empty_any("AddObjPolling");
	const Tango::DevVarStringArray	*argin;
	extract(in_any, argin);

        if (argin->length() < 4)
        {
		TangoSys_OMemStream o;
		o << "Not enough input arguments, needs 4 i.e. device name, attribute name, action, event name" << ends;

		Except::throw_exception((const char *)"DServer_Events",
					o.str(),
					(const char *)"EventSubscriptionChangeCmd::execute");

        }
 
        string dev_name, attr_name, action, event;
	dev_name = (*argin)[0];
        attr_name = (*argin)[1];
        action = (*argin)[2];
        event = (*argin)[3];

	cout1 << "EventSubscriptionChangeCmd: execute(): subscribtion for device " << dev_name << " attribute " << attr_name << " action " << action << " event " << event << endl;
        Tango::Util *tg = Tango::Util::instance();
        DeviceImpl *dev_impl;
        try
        {
                dev_impl = tg->get_device_by_name((*argin)[0]);
        }
        catch (Tango::DevFailed &e)
        {
                TangoSys_OMemStream o;
                o << "Device " << (*argin)[0] << " not found" << ends;
 
                Except::re_throw_exception(e,(const char *)"API_DeviceNotFound",o.str(),
                                           (const char *)"DServer::EventSubscriptionChangeCmd:");
        }                                                                                 

	int attr_ind = dev_impl->dev_attr->get_attr_ind_by_name(attr_name.c_str());
	Attribute &attribute = dev_impl->dev_attr->get_attr_by_ind(attr_ind);

	if (action == "subscribe")
	{
       		if (event == "change")
       		{
			cout1 << "EventSubscriptionChangeCmd::execute(): update change subscription\n";
       			attribute.ext->event_change_subscription = time(NULL);
		}
 
       		if (event == "quality_change")
       		{
			cout1 << "EventSubscriptionChangeCmd::execute(): update quality_change subscription\n";
       			attribute.ext->event_quality_subscription = time(NULL);
       		}
 
       		if (event == "periodic")
       		{
			cout1 << "EventSubscriptionChangeCmd::execute(): update periodic subscription\n";
       			attribute.ext->event_periodic_subscription = time(NULL);
       		}                                                  
 
       		if (event == "archive")
       		{
			cout1 << "EventSubscriptionChangeCmd::execute(): update archive subscription\n";
       			attribute.ext->event_archive_subscription = time(NULL);
       		}                                                  
//
// if polling period is 0 then set a default polling period of 1 second
// 
		if (attribute.ext->poll_period <= 0) 
		{
			attribute.ext->poll_period = 1000;
		}
//
// Start polling for attribute in question. I suppose I should
// check to see if the attribute is polled already. For the 
// moment I will simply ignore the exception. Why not rather 
// introduce a is_polled() method in each Attribute ?
//			
		try
		{
			Tango::Util *tg = Tango::Util::instance();
			DServer *adm_dev = tg->get_dserver_device();

			DevVarLongStringArray *send = new DevVarLongStringArray();
			send->lvalue.length(1);
			send->svalue.length(3);
			send->svalue[0] = dev_name.c_str();
			send->svalue[1] = CORBA::string_dup("attribute");
						
			send->lvalue[0] = attribute.ext->poll_period;
			send->svalue[2] = attr_name.c_str();
			
			cout1 << "EventSubscriptionChangeCmd::execute(): start attribute " << attr_name << " polling with period " << attribute.ext->poll_period << endl;
			adm_dev->add_obj_polling(send,false);

			delete send;
	
		}
		catch (...)
		{ 
			//cout << "EventSubscriptionChangeCmd::execute(): failed to start polling !\n";
			// nada
		}
	}

	return ret;
}

//+----------------------------------------------------------------------------
//
// method : 		EventObtainOfferedTypesCmd::EventObtainOfferedTypesCmd()
// 
// description : 	constructor for the command of the Events.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
EventObtainOfferedTypesCmd::EventObtainOfferedTypesCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc)
:Command(name,in,out,in_desc,out_desc)
{
}
//
//	Constructor without in/out parameters description
//
EventObtainOfferedTypesCmd::EventObtainOfferedTypesCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		EventObtainOfferedTypesCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool EventObtainOfferedTypesCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		EventObtainOfferedTypesCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *EventObtainOfferedTypesCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

// ADD COMMAND IMPLEMENTATION HERE

	return new CORBA::Any;
}
}	// namespace
