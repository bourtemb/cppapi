// This file is generated by omniidl (C++ backend)- omniORB_4_0. Do not edit.
#ifndef __tango_hh__
#define __tango_hh__

#ifndef USE_omniORB_logStream
#define USE_omniORB_logStream
#endif

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_tango
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_tango
#endif





#ifdef USE_stub_in_nt_dll
#ifndef USE_core_stub_in_nt_dll
#define USE_core_stub_in_nt_dll
#endif
#ifndef USE_dyn_stub_in_nt_dll
#define USE_dyn_stub_in_nt_dll
#endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE Tango

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevBoolean;

  typedef CORBA::Boolean DevBoolean;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevDouble;

  typedef CORBA::Double DevDouble;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevFloat;

  typedef CORBA::Float DevFloat;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevLong;

  typedef CORBA::Long DevLong;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevShort;

  typedef CORBA::Short DevShort;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevString;

  typedef char* DevString;
  typedef CORBA::String_var DevString_var;
  typedef CORBA::String_out DevString_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevULong;

  typedef CORBA::ULong DevULong;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevUShort;

  typedef CORBA::UShort DevUShort;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevVarFloatArray;

  class DevVarFloatArray_var;

  class DevVarFloatArray : public _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Float, 4, 4 >  {
  public:
    typedef DevVarFloatArray_var _var_type;
    inline DevVarFloatArray() {}
    inline DevVarFloatArray(const DevVarFloatArray& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Float, 4, 4 > (_s) {}

    inline DevVarFloatArray(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Float, 4, 4 > (_max) {}
    inline DevVarFloatArray(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::Float* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Float, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline DevVarFloatArray& operator = (const DevVarFloatArray& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Float, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class DevVarFloatArray_out;

  class DevVarFloatArray_var {
  public:
    inline DevVarFloatArray_var() : _pd_seq(0) {}
    inline DevVarFloatArray_var(DevVarFloatArray* _s) : _pd_seq(_s) {}
    inline DevVarFloatArray_var(const DevVarFloatArray_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevVarFloatArray(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevVarFloatArray_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevVarFloatArray_var& operator = (DevVarFloatArray* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevVarFloatArray_var& operator = (const DevVarFloatArray_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevVarFloatArray;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline CORBA::Float& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevVarFloatArray* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevVarFloatArray& () const { return *_pd_seq; }
#else
    inline operator const DevVarFloatArray& () const { return *_pd_seq; }
    inline operator DevVarFloatArray& () { return *_pd_seq; }
#endif
      
    inline const DevVarFloatArray& in() const { return *_pd_seq; }
    inline DevVarFloatArray&       inout()    { return *_pd_seq; }
    inline DevVarFloatArray*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevVarFloatArray* _retn() { DevVarFloatArray* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevVarFloatArray_out;
    
  private:
    DevVarFloatArray* _pd_seq;
  };

  class DevVarFloatArray_out {
  public:
    inline DevVarFloatArray_out(DevVarFloatArray*& _s) : _data(_s) { _data = 0; }
    inline DevVarFloatArray_out(DevVarFloatArray_var& _s)
      : _data(_s._pd_seq) { _s = (DevVarFloatArray*) 0; }
    inline DevVarFloatArray_out(const DevVarFloatArray_out& _s) : _data(_s._data) {}
    inline DevVarFloatArray_out& operator = (const DevVarFloatArray_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevVarFloatArray_out& operator = (DevVarFloatArray* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevVarFloatArray*&()  { return _data; }
    inline DevVarFloatArray*& ptr()       { return _data; }
    inline DevVarFloatArray* operator->() { return _data; }

    inline CORBA::Float& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevVarFloatArray*& _data;

  private:
    DevVarFloatArray_out();
    DevVarFloatArray_out& operator=(const DevVarFloatArray_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevVarDoubleArray;

  class DevVarDoubleArray_var;

  class DevVarDoubleArray : public _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Double, 8, 8 >  {
  public:
    typedef DevVarDoubleArray_var _var_type;
    inline DevVarDoubleArray() {}
    inline DevVarDoubleArray(const DevVarDoubleArray& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Double, 8, 8 > (_s) {}

    inline DevVarDoubleArray(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Double, 8, 8 > (_max) {}
    inline DevVarDoubleArray(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::Double* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Double, 8, 8 > (_max, _len, _val, _rel) {}

  

    inline DevVarDoubleArray& operator = (const DevVarDoubleArray& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Double, 8, 8 > ::operator=(_s);
      return *this;
    }
  };

  class DevVarDoubleArray_out;

  class DevVarDoubleArray_var {
  public:
    inline DevVarDoubleArray_var() : _pd_seq(0) {}
    inline DevVarDoubleArray_var(DevVarDoubleArray* _s) : _pd_seq(_s) {}
    inline DevVarDoubleArray_var(const DevVarDoubleArray_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevVarDoubleArray(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevVarDoubleArray_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevVarDoubleArray_var& operator = (DevVarDoubleArray* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevVarDoubleArray_var& operator = (const DevVarDoubleArray_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevVarDoubleArray;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline CORBA::Double& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevVarDoubleArray* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevVarDoubleArray& () const { return *_pd_seq; }
#else
    inline operator const DevVarDoubleArray& () const { return *_pd_seq; }
    inline operator DevVarDoubleArray& () { return *_pd_seq; }
#endif
      
    inline const DevVarDoubleArray& in() const { return *_pd_seq; }
    inline DevVarDoubleArray&       inout()    { return *_pd_seq; }
    inline DevVarDoubleArray*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevVarDoubleArray* _retn() { DevVarDoubleArray* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevVarDoubleArray_out;
    
  private:
    DevVarDoubleArray* _pd_seq;
  };

  class DevVarDoubleArray_out {
  public:
    inline DevVarDoubleArray_out(DevVarDoubleArray*& _s) : _data(_s) { _data = 0; }
    inline DevVarDoubleArray_out(DevVarDoubleArray_var& _s)
      : _data(_s._pd_seq) { _s = (DevVarDoubleArray*) 0; }
    inline DevVarDoubleArray_out(const DevVarDoubleArray_out& _s) : _data(_s._data) {}
    inline DevVarDoubleArray_out& operator = (const DevVarDoubleArray_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevVarDoubleArray_out& operator = (DevVarDoubleArray* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevVarDoubleArray*&()  { return _data; }
    inline DevVarDoubleArray*& ptr()       { return _data; }
    inline DevVarDoubleArray* operator->() { return _data; }

    inline CORBA::Double& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevVarDoubleArray*& _data;

  private:
    DevVarDoubleArray_out();
    DevVarDoubleArray_out& operator=(const DevVarDoubleArray_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevVarShortArray;

  class DevVarShortArray_var;

  class DevVarShortArray : public _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 >  {
  public:
    typedef DevVarShortArray_var _var_type;
    inline DevVarShortArray() {}
    inline DevVarShortArray(const DevVarShortArray& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > (_s) {}

    inline DevVarShortArray(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > (_max) {}
    inline DevVarShortArray(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::Short* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > (_max, _len, _val, _rel) {}

  

    inline DevVarShortArray& operator = (const DevVarShortArray& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > ::operator=(_s);
      return *this;
    }
  };

  class DevVarShortArray_out;

  class DevVarShortArray_var {
  public:
    inline DevVarShortArray_var() : _pd_seq(0) {}
    inline DevVarShortArray_var(DevVarShortArray* _s) : _pd_seq(_s) {}
    inline DevVarShortArray_var(const DevVarShortArray_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevVarShortArray(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevVarShortArray_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevVarShortArray_var& operator = (DevVarShortArray* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevVarShortArray_var& operator = (const DevVarShortArray_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevVarShortArray;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline CORBA::Short& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevVarShortArray* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevVarShortArray& () const { return *_pd_seq; }
#else
    inline operator const DevVarShortArray& () const { return *_pd_seq; }
    inline operator DevVarShortArray& () { return *_pd_seq; }
#endif
      
    inline const DevVarShortArray& in() const { return *_pd_seq; }
    inline DevVarShortArray&       inout()    { return *_pd_seq; }
    inline DevVarShortArray*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevVarShortArray* _retn() { DevVarShortArray* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevVarShortArray_out;
    
  private:
    DevVarShortArray* _pd_seq;
  };

  class DevVarShortArray_out {
  public:
    inline DevVarShortArray_out(DevVarShortArray*& _s) : _data(_s) { _data = 0; }
    inline DevVarShortArray_out(DevVarShortArray_var& _s)
      : _data(_s._pd_seq) { _s = (DevVarShortArray*) 0; }
    inline DevVarShortArray_out(const DevVarShortArray_out& _s) : _data(_s._data) {}
    inline DevVarShortArray_out& operator = (const DevVarShortArray_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevVarShortArray_out& operator = (DevVarShortArray* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevVarShortArray*&()  { return _data; }
    inline DevVarShortArray*& ptr()       { return _data; }
    inline DevVarShortArray* operator->() { return _data; }

    inline CORBA::Short& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevVarShortArray*& _data;

  private:
    DevVarShortArray_out();
    DevVarShortArray_out& operator=(const DevVarShortArray_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevVarLongArray;

  class DevVarLongArray_var;

  class DevVarLongArray : public _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Long, 4, 4 >  {
  public:
    typedef DevVarLongArray_var _var_type;
    inline DevVarLongArray() {}
    inline DevVarLongArray(const DevVarLongArray& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Long, 4, 4 > (_s) {}

    inline DevVarLongArray(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Long, 4, 4 > (_max) {}
    inline DevVarLongArray(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::Long* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Long, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline DevVarLongArray& operator = (const DevVarLongArray& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Long, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class DevVarLongArray_out;

  class DevVarLongArray_var {
  public:
    inline DevVarLongArray_var() : _pd_seq(0) {}
    inline DevVarLongArray_var(DevVarLongArray* _s) : _pd_seq(_s) {}
    inline DevVarLongArray_var(const DevVarLongArray_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevVarLongArray(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevVarLongArray_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevVarLongArray_var& operator = (DevVarLongArray* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevVarLongArray_var& operator = (const DevVarLongArray_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevVarLongArray;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline CORBA::Long& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevVarLongArray* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevVarLongArray& () const { return *_pd_seq; }
#else
    inline operator const DevVarLongArray& () const { return *_pd_seq; }
    inline operator DevVarLongArray& () { return *_pd_seq; }
#endif
      
    inline const DevVarLongArray& in() const { return *_pd_seq; }
    inline DevVarLongArray&       inout()    { return *_pd_seq; }
    inline DevVarLongArray*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevVarLongArray* _retn() { DevVarLongArray* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevVarLongArray_out;
    
  private:
    DevVarLongArray* _pd_seq;
  };

  class DevVarLongArray_out {
  public:
    inline DevVarLongArray_out(DevVarLongArray*& _s) : _data(_s) { _data = 0; }
    inline DevVarLongArray_out(DevVarLongArray_var& _s)
      : _data(_s._pd_seq) { _s = (DevVarLongArray*) 0; }
    inline DevVarLongArray_out(const DevVarLongArray_out& _s) : _data(_s._data) {}
    inline DevVarLongArray_out& operator = (const DevVarLongArray_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevVarLongArray_out& operator = (DevVarLongArray* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevVarLongArray*&()  { return _data; }
    inline DevVarLongArray*& ptr()       { return _data; }
    inline DevVarLongArray* operator->() { return _data; }

    inline CORBA::Long& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevVarLongArray*& _data;

  private:
    DevVarLongArray_out();
    DevVarLongArray_out& operator=(const DevVarLongArray_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevVarCharArray;

  class DevVarCharArray_var;

  class DevVarCharArray : public _CORBA_Unbounded_Sequence_Octet {
  public:
    typedef DevVarCharArray_var _var_type;
    inline DevVarCharArray() {}
    inline DevVarCharArray(const DevVarCharArray& _s)
      : _CORBA_Unbounded_Sequence_Octet(_s) {}

    inline DevVarCharArray(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_Octet(_max) {}
    inline DevVarCharArray(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::Octet* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

  

    inline DevVarCharArray& operator = (const DevVarCharArray& _s) {
      _CORBA_Unbounded_Sequence_Octet::operator=(_s);
      return *this;
    }
  };

  class DevVarCharArray_out;

  class DevVarCharArray_var {
  public:
    inline DevVarCharArray_var() : _pd_seq(0) {}
    inline DevVarCharArray_var(DevVarCharArray* _s) : _pd_seq(_s) {}
    inline DevVarCharArray_var(const DevVarCharArray_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevVarCharArray(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevVarCharArray_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevVarCharArray_var& operator = (DevVarCharArray* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevVarCharArray_var& operator = (const DevVarCharArray_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevVarCharArray;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline CORBA::Octet& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevVarCharArray* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevVarCharArray& () const { return *_pd_seq; }
#else
    inline operator const DevVarCharArray& () const { return *_pd_seq; }
    inline operator DevVarCharArray& () { return *_pd_seq; }
#endif
      
    inline const DevVarCharArray& in() const { return *_pd_seq; }
    inline DevVarCharArray&       inout()    { return *_pd_seq; }
    inline DevVarCharArray*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevVarCharArray* _retn() { DevVarCharArray* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevVarCharArray_out;
    
  private:
    DevVarCharArray* _pd_seq;
  };

  class DevVarCharArray_out {
  public:
    inline DevVarCharArray_out(DevVarCharArray*& _s) : _data(_s) { _data = 0; }
    inline DevVarCharArray_out(DevVarCharArray_var& _s)
      : _data(_s._pd_seq) { _s = (DevVarCharArray*) 0; }
    inline DevVarCharArray_out(const DevVarCharArray_out& _s) : _data(_s._data) {}
    inline DevVarCharArray_out& operator = (const DevVarCharArray_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevVarCharArray_out& operator = (DevVarCharArray* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevVarCharArray*&()  { return _data; }
    inline DevVarCharArray*& ptr()       { return _data; }
    inline DevVarCharArray* operator->() { return _data; }

    inline CORBA::Octet& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevVarCharArray*& _data;

  private:
    DevVarCharArray_out();
    DevVarCharArray_out& operator=(const DevVarCharArray_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevVarStringArray;

  class DevVarStringArray_var;

  class DevVarStringArray : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef DevVarStringArray_var _var_type;
    inline DevVarStringArray() {}
    inline DevVarStringArray(const DevVarStringArray& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline DevVarStringArray(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline DevVarStringArray(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline DevVarStringArray& operator = (const DevVarStringArray& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class DevVarStringArray_out;

  class DevVarStringArray_var {
  public:
    inline DevVarStringArray_var() : _pd_seq(0) {}
    inline DevVarStringArray_var(DevVarStringArray* _s) : _pd_seq(_s) {}
    inline DevVarStringArray_var(const DevVarStringArray_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevVarStringArray(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevVarStringArray_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevVarStringArray_var& operator = (DevVarStringArray* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevVarStringArray_var& operator = (const DevVarStringArray_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevVarStringArray;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevVarStringArray* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevVarStringArray& () const { return *_pd_seq; }
#else
    inline operator const DevVarStringArray& () const { return *_pd_seq; }
    inline operator DevVarStringArray& () { return *_pd_seq; }
#endif
      
    inline const DevVarStringArray& in() const { return *_pd_seq; }
    inline DevVarStringArray&       inout()    { return *_pd_seq; }
    inline DevVarStringArray*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevVarStringArray* _retn() { DevVarStringArray* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevVarStringArray_out;
    
  private:
    DevVarStringArray* _pd_seq;
  };

  class DevVarStringArray_out {
  public:
    inline DevVarStringArray_out(DevVarStringArray*& _s) : _data(_s) { _data = 0; }
    inline DevVarStringArray_out(DevVarStringArray_var& _s)
      : _data(_s._pd_seq) { _s = (DevVarStringArray*) 0; }
    inline DevVarStringArray_out(const DevVarStringArray_out& _s) : _data(_s._data) {}
    inline DevVarStringArray_out& operator = (const DevVarStringArray_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevVarStringArray_out& operator = (DevVarStringArray* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevVarStringArray*&()  { return _data; }
    inline DevVarStringArray*& ptr()       { return _data; }
    inline DevVarStringArray* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevVarStringArray*& _data;

  private:
    DevVarStringArray_out();
    DevVarStringArray_out& operator=(const DevVarStringArray_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevVarUShortArray;

  class DevVarUShortArray_var;

  class DevVarUShortArray : public _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::UShort, 2, 2 >  {
  public:
    typedef DevVarUShortArray_var _var_type;
    inline DevVarUShortArray() {}
    inline DevVarUShortArray(const DevVarUShortArray& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::UShort, 2, 2 > (_s) {}

    inline DevVarUShortArray(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::UShort, 2, 2 > (_max) {}
    inline DevVarUShortArray(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::UShort* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::UShort, 2, 2 > (_max, _len, _val, _rel) {}

  

    inline DevVarUShortArray& operator = (const DevVarUShortArray& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::UShort, 2, 2 > ::operator=(_s);
      return *this;
    }
  };

  class DevVarUShortArray_out;

  class DevVarUShortArray_var {
  public:
    inline DevVarUShortArray_var() : _pd_seq(0) {}
    inline DevVarUShortArray_var(DevVarUShortArray* _s) : _pd_seq(_s) {}
    inline DevVarUShortArray_var(const DevVarUShortArray_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevVarUShortArray(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevVarUShortArray_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevVarUShortArray_var& operator = (DevVarUShortArray* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevVarUShortArray_var& operator = (const DevVarUShortArray_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevVarUShortArray;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline CORBA::UShort& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevVarUShortArray* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevVarUShortArray& () const { return *_pd_seq; }
#else
    inline operator const DevVarUShortArray& () const { return *_pd_seq; }
    inline operator DevVarUShortArray& () { return *_pd_seq; }
#endif
      
    inline const DevVarUShortArray& in() const { return *_pd_seq; }
    inline DevVarUShortArray&       inout()    { return *_pd_seq; }
    inline DevVarUShortArray*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevVarUShortArray* _retn() { DevVarUShortArray* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevVarUShortArray_out;
    
  private:
    DevVarUShortArray* _pd_seq;
  };

  class DevVarUShortArray_out {
  public:
    inline DevVarUShortArray_out(DevVarUShortArray*& _s) : _data(_s) { _data = 0; }
    inline DevVarUShortArray_out(DevVarUShortArray_var& _s)
      : _data(_s._pd_seq) { _s = (DevVarUShortArray*) 0; }
    inline DevVarUShortArray_out(const DevVarUShortArray_out& _s) : _data(_s._data) {}
    inline DevVarUShortArray_out& operator = (const DevVarUShortArray_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevVarUShortArray_out& operator = (DevVarUShortArray* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevVarUShortArray*&()  { return _data; }
    inline DevVarUShortArray*& ptr()       { return _data; }
    inline DevVarUShortArray* operator->() { return _data; }

    inline CORBA::UShort& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevVarUShortArray*& _data;

  private:
    DevVarUShortArray_out();
    DevVarUShortArray_out& operator=(const DevVarUShortArray_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevVarULongArray;

  class DevVarULongArray_var;

  class DevVarULongArray : public _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::ULong, 4, 4 >  {
  public:
    typedef DevVarULongArray_var _var_type;
    inline DevVarULongArray() {}
    inline DevVarULongArray(const DevVarULongArray& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::ULong, 4, 4 > (_s) {}

    inline DevVarULongArray(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::ULong, 4, 4 > (_max) {}
    inline DevVarULongArray(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::ULong* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline DevVarULongArray& operator = (const DevVarULongArray& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::ULong, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class DevVarULongArray_out;

  class DevVarULongArray_var {
  public:
    inline DevVarULongArray_var() : _pd_seq(0) {}
    inline DevVarULongArray_var(DevVarULongArray* _s) : _pd_seq(_s) {}
    inline DevVarULongArray_var(const DevVarULongArray_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevVarULongArray(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevVarULongArray_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevVarULongArray_var& operator = (DevVarULongArray* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevVarULongArray_var& operator = (const DevVarULongArray_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevVarULongArray;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline CORBA::ULong& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevVarULongArray* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevVarULongArray& () const { return *_pd_seq; }
#else
    inline operator const DevVarULongArray& () const { return *_pd_seq; }
    inline operator DevVarULongArray& () { return *_pd_seq; }
#endif
      
    inline const DevVarULongArray& in() const { return *_pd_seq; }
    inline DevVarULongArray&       inout()    { return *_pd_seq; }
    inline DevVarULongArray*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevVarULongArray* _retn() { DevVarULongArray* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevVarULongArray_out;
    
  private:
    DevVarULongArray* _pd_seq;
  };

  class DevVarULongArray_out {
  public:
    inline DevVarULongArray_out(DevVarULongArray*& _s) : _data(_s) { _data = 0; }
    inline DevVarULongArray_out(DevVarULongArray_var& _s)
      : _data(_s._pd_seq) { _s = (DevVarULongArray*) 0; }
    inline DevVarULongArray_out(const DevVarULongArray_out& _s) : _data(_s._data) {}
    inline DevVarULongArray_out& operator = (const DevVarULongArray_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevVarULongArray_out& operator = (DevVarULongArray* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevVarULongArray*&()  { return _data; }
    inline DevVarULongArray*& ptr()       { return _data; }
    inline DevVarULongArray* operator->() { return _data; }

    inline CORBA::ULong& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevVarULongArray*& _data;

  private:
    DevVarULongArray_out();
    DevVarULongArray_out& operator=(const DevVarULongArray_var&);
  };

  struct DevVarLongStringArray {
    typedef _CORBA_ConstrType_Variable_Var<DevVarLongStringArray> _var_type;

    
    DevVarLongArray lvalue;

    DevVarStringArray svalue;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DevVarLongStringArray::_var_type DevVarLongStringArray_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DevVarLongStringArray,DevVarLongStringArray_var > DevVarLongStringArray_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevVarLongStringArray;

  struct DevVarDoubleStringArray {
    typedef _CORBA_ConstrType_Variable_Var<DevVarDoubleStringArray> _var_type;

    
    DevVarDoubleArray dvalue;

    DevVarStringArray svalue;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DevVarDoubleStringArray::_var_type DevVarDoubleStringArray_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DevVarDoubleStringArray,DevVarDoubleStringArray_var > DevVarDoubleStringArray_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevVarDoubleStringArray;

  enum AttrQuality { ATTR_VALID, ATTR_INVALID, ATTR_ALARM, ATTR_CHANGING /*, __max_AttrQuality=0xffffffff */ };
  typedef AttrQuality& AttrQuality_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_AttrQuality;

  enum AttrWriteType { READ, READ_WITH_WRITE, WRITE, READ_WRITE /*, __max_AttrWriteType=0xffffffff */ };
  typedef AttrWriteType& AttrWriteType_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_AttrWriteType;

  enum AttrDataFormat { SCALAR, SPECTRUM, IMAGE /*, __max_AttrDataFormat=0xffffffff */ };
  typedef AttrDataFormat& AttrDataFormat_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_AttrDataFormat;

  enum DevSource { DEV, CACHE, CACHE_DEV /*, __max_DevSource=0xffffffff */ };
  typedef DevSource& DevSource_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevSource;

  enum ErrSeverity { WARN, ERR, PANIC /*, __max_ErrSeverity=0xffffffff */ };
  typedef ErrSeverity& ErrSeverity_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_ErrSeverity;

  enum DevState { ON, OFF, CLOSE, OPEN, INSERT, EXTRACT, MOVING, STANDBY, FAULT, INIT, RUNNING, ALARM, DISABLE, UNKNOWN /*, __max_DevState=0xffffffff */ };
  typedef DevState& DevState_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevState;

  enum DispLevel { OPERATOR, EXPERT /*, __max_DispLevel=0xffffffff */ };
  typedef DispLevel& DispLevel_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DispLevel;

  struct TimeVal {
    typedef _CORBA_ConstrType_Fix_Var<TimeVal> _var_type;

    
    CORBA::Long tv_sec;

    CORBA::Long tv_usec;

    CORBA::Long tv_nsec;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef TimeVal::_var_type TimeVal_var;

  typedef TimeVal& TimeVal_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_TimeVal;

  struct DevCmdInfo {
    typedef _CORBA_ConstrType_Variable_Var<DevCmdInfo> _var_type;

    
    CORBA::String_member cmd_name;

    CORBA::Long cmd_tag;

    CORBA::Long in_type;

    CORBA::Long out_type;

    CORBA::String_member in_type_desc;

    CORBA::String_member out_type_desc;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DevCmdInfo::_var_type DevCmdInfo_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DevCmdInfo,DevCmdInfo_var > DevCmdInfo_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevCmdInfo;

  struct DevCmdInfo_2 {
    typedef _CORBA_ConstrType_Variable_Var<DevCmdInfo_2> _var_type;

    
    CORBA::String_member cmd_name;

    DispLevel level;

    CORBA::Long cmd_tag;

    CORBA::Long in_type;

    CORBA::Long out_type;

    CORBA::String_member in_type_desc;

    CORBA::String_member out_type_desc;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DevCmdInfo_2::_var_type DevCmdInfo_2_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DevCmdInfo_2,DevCmdInfo_2_var > DevCmdInfo_2_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevCmdInfo_2;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevCmdInfoList;

  class DevCmdInfoList_var;

  class DevCmdInfoList : public _CORBA_Unbounded_Sequence< DevCmdInfo >  {
  public:
    typedef DevCmdInfoList_var _var_type;
    inline DevCmdInfoList() {}
    inline DevCmdInfoList(const DevCmdInfoList& _s)
      : _CORBA_Unbounded_Sequence< DevCmdInfo > (_s) {}

    inline DevCmdInfoList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< DevCmdInfo > (_max) {}
    inline DevCmdInfoList(_CORBA_ULong _max, _CORBA_ULong _len, DevCmdInfo* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< DevCmdInfo > (_max, _len, _val, _rel) {}

  

    inline DevCmdInfoList& operator = (const DevCmdInfoList& _s) {
      _CORBA_Unbounded_Sequence< DevCmdInfo > ::operator=(_s);
      return *this;
    }
  };

  class DevCmdInfoList_out;

  class DevCmdInfoList_var {
  public:
    inline DevCmdInfoList_var() : _pd_seq(0) {}
    inline DevCmdInfoList_var(DevCmdInfoList* _s) : _pd_seq(_s) {}
    inline DevCmdInfoList_var(const DevCmdInfoList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevCmdInfoList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevCmdInfoList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevCmdInfoList_var& operator = (DevCmdInfoList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevCmdInfoList_var& operator = (const DevCmdInfoList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevCmdInfoList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline DevCmdInfo& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevCmdInfoList* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevCmdInfoList& () const { return *_pd_seq; }
#else
    inline operator const DevCmdInfoList& () const { return *_pd_seq; }
    inline operator DevCmdInfoList& () { return *_pd_seq; }
#endif
      
    inline const DevCmdInfoList& in() const { return *_pd_seq; }
    inline DevCmdInfoList&       inout()    { return *_pd_seq; }
    inline DevCmdInfoList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevCmdInfoList* _retn() { DevCmdInfoList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevCmdInfoList_out;
    
  private:
    DevCmdInfoList* _pd_seq;
  };

  class DevCmdInfoList_out {
  public:
    inline DevCmdInfoList_out(DevCmdInfoList*& _s) : _data(_s) { _data = 0; }
    inline DevCmdInfoList_out(DevCmdInfoList_var& _s)
      : _data(_s._pd_seq) { _s = (DevCmdInfoList*) 0; }
    inline DevCmdInfoList_out(const DevCmdInfoList_out& _s) : _data(_s._data) {}
    inline DevCmdInfoList_out& operator = (const DevCmdInfoList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevCmdInfoList_out& operator = (DevCmdInfoList* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevCmdInfoList*&()  { return _data; }
    inline DevCmdInfoList*& ptr()       { return _data; }
    inline DevCmdInfoList* operator->() { return _data; }

    inline DevCmdInfo& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevCmdInfoList*& _data;

  private:
    DevCmdInfoList_out();
    DevCmdInfoList_out& operator=(const DevCmdInfoList_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevCmdInfoList_2;

  class DevCmdInfoList_2_var;

  class DevCmdInfoList_2 : public _CORBA_Unbounded_Sequence< DevCmdInfo_2 >  {
  public:
    typedef DevCmdInfoList_2_var _var_type;
    inline DevCmdInfoList_2() {}
    inline DevCmdInfoList_2(const DevCmdInfoList_2& _s)
      : _CORBA_Unbounded_Sequence< DevCmdInfo_2 > (_s) {}

    inline DevCmdInfoList_2(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< DevCmdInfo_2 > (_max) {}
    inline DevCmdInfoList_2(_CORBA_ULong _max, _CORBA_ULong _len, DevCmdInfo_2* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< DevCmdInfo_2 > (_max, _len, _val, _rel) {}

  

    inline DevCmdInfoList_2& operator = (const DevCmdInfoList_2& _s) {
      _CORBA_Unbounded_Sequence< DevCmdInfo_2 > ::operator=(_s);
      return *this;
    }
  };

  class DevCmdInfoList_2_out;

  class DevCmdInfoList_2_var {
  public:
    inline DevCmdInfoList_2_var() : _pd_seq(0) {}
    inline DevCmdInfoList_2_var(DevCmdInfoList_2* _s) : _pd_seq(_s) {}
    inline DevCmdInfoList_2_var(const DevCmdInfoList_2_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevCmdInfoList_2(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevCmdInfoList_2_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevCmdInfoList_2_var& operator = (DevCmdInfoList_2* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevCmdInfoList_2_var& operator = (const DevCmdInfoList_2_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevCmdInfoList_2;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline DevCmdInfo_2& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevCmdInfoList_2* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevCmdInfoList_2& () const { return *_pd_seq; }
#else
    inline operator const DevCmdInfoList_2& () const { return *_pd_seq; }
    inline operator DevCmdInfoList_2& () { return *_pd_seq; }
#endif
      
    inline const DevCmdInfoList_2& in() const { return *_pd_seq; }
    inline DevCmdInfoList_2&       inout()    { return *_pd_seq; }
    inline DevCmdInfoList_2*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevCmdInfoList_2* _retn() { DevCmdInfoList_2* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevCmdInfoList_2_out;
    
  private:
    DevCmdInfoList_2* _pd_seq;
  };

  class DevCmdInfoList_2_out {
  public:
    inline DevCmdInfoList_2_out(DevCmdInfoList_2*& _s) : _data(_s) { _data = 0; }
    inline DevCmdInfoList_2_out(DevCmdInfoList_2_var& _s)
      : _data(_s._pd_seq) { _s = (DevCmdInfoList_2*) 0; }
    inline DevCmdInfoList_2_out(const DevCmdInfoList_2_out& _s) : _data(_s._data) {}
    inline DevCmdInfoList_2_out& operator = (const DevCmdInfoList_2_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevCmdInfoList_2_out& operator = (DevCmdInfoList_2* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevCmdInfoList_2*&()  { return _data; }
    inline DevCmdInfoList_2*& ptr()       { return _data; }
    inline DevCmdInfoList_2* operator->() { return _data; }

    inline DevCmdInfo_2& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevCmdInfoList_2*& _data;

  private:
    DevCmdInfoList_2_out();
    DevCmdInfoList_2_out& operator=(const DevCmdInfoList_2_var&);
  };

  struct DevError {
    typedef _CORBA_ConstrType_Variable_Var<DevError> _var_type;

    
    CORBA::String_member reason;

    ErrSeverity severity;

    CORBA::String_member desc;

    CORBA::String_member origin;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DevError::_var_type DevError_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DevError,DevError_var > DevError_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevError;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevErrorList;

  class DevErrorList_var;

  class DevErrorList : public _CORBA_Unbounded_Sequence< DevError >  {
  public:
    typedef DevErrorList_var _var_type;
    inline DevErrorList() {}
    inline DevErrorList(const DevErrorList& _s)
      : _CORBA_Unbounded_Sequence< DevError > (_s) {}

    inline DevErrorList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< DevError > (_max) {}
    inline DevErrorList(_CORBA_ULong _max, _CORBA_ULong _len, DevError* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< DevError > (_max, _len, _val, _rel) {}

  

    inline DevErrorList& operator = (const DevErrorList& _s) {
      _CORBA_Unbounded_Sequence< DevError > ::operator=(_s);
      return *this;
    }
  };

  class DevErrorList_out;

  class DevErrorList_var {
  public:
    inline DevErrorList_var() : _pd_seq(0) {}
    inline DevErrorList_var(DevErrorList* _s) : _pd_seq(_s) {}
    inline DevErrorList_var(const DevErrorList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevErrorList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevErrorList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevErrorList_var& operator = (DevErrorList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevErrorList_var& operator = (const DevErrorList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevErrorList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline DevError& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevErrorList* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevErrorList& () const { return *_pd_seq; }
#else
    inline operator const DevErrorList& () const { return *_pd_seq; }
    inline operator DevErrorList& () { return *_pd_seq; }
#endif
      
    inline const DevErrorList& in() const { return *_pd_seq; }
    inline DevErrorList&       inout()    { return *_pd_seq; }
    inline DevErrorList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevErrorList* _retn() { DevErrorList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevErrorList_out;
    
  private:
    DevErrorList* _pd_seq;
  };

  class DevErrorList_out {
  public:
    inline DevErrorList_out(DevErrorList*& _s) : _data(_s) { _data = 0; }
    inline DevErrorList_out(DevErrorList_var& _s)
      : _data(_s._pd_seq) { _s = (DevErrorList*) 0; }
    inline DevErrorList_out(const DevErrorList_out& _s) : _data(_s._data) {}
    inline DevErrorList_out& operator = (const DevErrorList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevErrorList_out& operator = (DevErrorList* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevErrorList*&()  { return _data; }
    inline DevErrorList*& ptr()       { return _data; }
    inline DevErrorList* operator->() { return _data; }

    inline DevError& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevErrorList*& _data;

  private:
    DevErrorList_out();
    DevErrorList_out& operator=(const DevErrorList_var&);
  };

  class DevFailed : public CORBA::UserException {
  public:
    
    DevErrorList errors;

  

    inline DevFailed() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    DevFailed(const DevFailed&);
    DevFailed(const DevErrorList i_errors);
    DevFailed& operator=(const DevFailed&);
    virtual ~DevFailed();
    virtual void _raise() const;
    static DevFailed* _downcast(CORBA::Exception*);
    static const DevFailed* _downcast(const CORBA::Exception*);
    static inline DevFailed* _narrow(CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevFailed;

  struct AttributeConfig {
    typedef _CORBA_ConstrType_Variable_Var<AttributeConfig> _var_type;

    
    CORBA::String_member name;

    AttrWriteType writable;

    AttrDataFormat data_format;

    CORBA::Long data_type;

    CORBA::Long max_dim_x;

    CORBA::Long max_dim_y;

    CORBA::String_member description;

    CORBA::String_member label;

    CORBA::String_member unit;

    CORBA::String_member standard_unit;

    CORBA::String_member display_unit;

    CORBA::String_member format;

    CORBA::String_member min_value;

    CORBA::String_member max_value;

    CORBA::String_member min_alarm;

    CORBA::String_member max_alarm;

    CORBA::String_member writable_attr_name;

    DevVarStringArray extensions;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef AttributeConfig::_var_type AttributeConfig_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< AttributeConfig,AttributeConfig_var > AttributeConfig_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_AttributeConfig;

  struct AttributeConfig_2 {
    typedef _CORBA_ConstrType_Variable_Var<AttributeConfig_2> _var_type;

    
    CORBA::String_member name;

    AttrWriteType writable;

    AttrDataFormat data_format;

    CORBA::Long data_type;

    CORBA::Long max_dim_x;

    CORBA::Long max_dim_y;

    CORBA::String_member description;

    CORBA::String_member label;

    CORBA::String_member unit;

    CORBA::String_member standard_unit;

    CORBA::String_member display_unit;

    CORBA::String_member format;

    CORBA::String_member min_value;

    CORBA::String_member max_value;

    CORBA::String_member min_alarm;

    CORBA::String_member max_alarm;

    CORBA::String_member writable_attr_name;

    DispLevel level;

    DevVarStringArray extensions;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef AttributeConfig_2::_var_type AttributeConfig_2_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< AttributeConfig_2,AttributeConfig_2_var > AttributeConfig_2_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_AttributeConfig_2;

  struct AttributeValue {
    typedef _CORBA_ConstrType_Variable_Var<AttributeValue> _var_type;

    
    CORBA::Any value;

    AttrQuality quality;

    TimeVal time;

    CORBA::String_member name;

    CORBA::Long dim_x;

    CORBA::Long dim_y;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef AttributeValue::_var_type AttributeValue_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< AttributeValue,AttributeValue_var > AttributeValue_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_AttributeValue;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_AttributeConfigList;

  class AttributeConfigList_var;

  class AttributeConfigList : public _CORBA_Unbounded_Sequence< AttributeConfig >  {
  public:
    typedef AttributeConfigList_var _var_type;
    inline AttributeConfigList() {}
    inline AttributeConfigList(const AttributeConfigList& _s)
      : _CORBA_Unbounded_Sequence< AttributeConfig > (_s) {}

    inline AttributeConfigList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< AttributeConfig > (_max) {}
    inline AttributeConfigList(_CORBA_ULong _max, _CORBA_ULong _len, AttributeConfig* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< AttributeConfig > (_max, _len, _val, _rel) {}

  

    inline AttributeConfigList& operator = (const AttributeConfigList& _s) {
      _CORBA_Unbounded_Sequence< AttributeConfig > ::operator=(_s);
      return *this;
    }
  };

  class AttributeConfigList_out;

  class AttributeConfigList_var {
  public:
    inline AttributeConfigList_var() : _pd_seq(0) {}
    inline AttributeConfigList_var(AttributeConfigList* _s) : _pd_seq(_s) {}
    inline AttributeConfigList_var(const AttributeConfigList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new AttributeConfigList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~AttributeConfigList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline AttributeConfigList_var& operator = (AttributeConfigList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline AttributeConfigList_var& operator = (const AttributeConfigList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new AttributeConfigList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline AttributeConfig& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline AttributeConfigList* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator AttributeConfigList& () const { return *_pd_seq; }
#else
    inline operator const AttributeConfigList& () const { return *_pd_seq; }
    inline operator AttributeConfigList& () { return *_pd_seq; }
#endif
      
    inline const AttributeConfigList& in() const { return *_pd_seq; }
    inline AttributeConfigList&       inout()    { return *_pd_seq; }
    inline AttributeConfigList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline AttributeConfigList* _retn() { AttributeConfigList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class AttributeConfigList_out;
    
  private:
    AttributeConfigList* _pd_seq;
  };

  class AttributeConfigList_out {
  public:
    inline AttributeConfigList_out(AttributeConfigList*& _s) : _data(_s) { _data = 0; }
    inline AttributeConfigList_out(AttributeConfigList_var& _s)
      : _data(_s._pd_seq) { _s = (AttributeConfigList*) 0; }
    inline AttributeConfigList_out(const AttributeConfigList_out& _s) : _data(_s._data) {}
    inline AttributeConfigList_out& operator = (const AttributeConfigList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline AttributeConfigList_out& operator = (AttributeConfigList* _s) {
      _data = _s;
      return *this;
    }
    inline operator AttributeConfigList*&()  { return _data; }
    inline AttributeConfigList*& ptr()       { return _data; }
    inline AttributeConfigList* operator->() { return _data; }

    inline AttributeConfig& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    AttributeConfigList*& _data;

  private:
    AttributeConfigList_out();
    AttributeConfigList_out& operator=(const AttributeConfigList_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_AttributeConfigList_2;

  class AttributeConfigList_2_var;

  class AttributeConfigList_2 : public _CORBA_Unbounded_Sequence< AttributeConfig_2 >  {
  public:
    typedef AttributeConfigList_2_var _var_type;
    inline AttributeConfigList_2() {}
    inline AttributeConfigList_2(const AttributeConfigList_2& _s)
      : _CORBA_Unbounded_Sequence< AttributeConfig_2 > (_s) {}

    inline AttributeConfigList_2(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< AttributeConfig_2 > (_max) {}
    inline AttributeConfigList_2(_CORBA_ULong _max, _CORBA_ULong _len, AttributeConfig_2* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< AttributeConfig_2 > (_max, _len, _val, _rel) {}

  

    inline AttributeConfigList_2& operator = (const AttributeConfigList_2& _s) {
      _CORBA_Unbounded_Sequence< AttributeConfig_2 > ::operator=(_s);
      return *this;
    }
  };

  class AttributeConfigList_2_out;

  class AttributeConfigList_2_var {
  public:
    inline AttributeConfigList_2_var() : _pd_seq(0) {}
    inline AttributeConfigList_2_var(AttributeConfigList_2* _s) : _pd_seq(_s) {}
    inline AttributeConfigList_2_var(const AttributeConfigList_2_var& _s) {
      if( _s._pd_seq )  _pd_seq = new AttributeConfigList_2(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~AttributeConfigList_2_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline AttributeConfigList_2_var& operator = (AttributeConfigList_2* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline AttributeConfigList_2_var& operator = (const AttributeConfigList_2_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new AttributeConfigList_2;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline AttributeConfig_2& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline AttributeConfigList_2* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator AttributeConfigList_2& () const { return *_pd_seq; }
#else
    inline operator const AttributeConfigList_2& () const { return *_pd_seq; }
    inline operator AttributeConfigList_2& () { return *_pd_seq; }
#endif
      
    inline const AttributeConfigList_2& in() const { return *_pd_seq; }
    inline AttributeConfigList_2&       inout()    { return *_pd_seq; }
    inline AttributeConfigList_2*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline AttributeConfigList_2* _retn() { AttributeConfigList_2* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class AttributeConfigList_2_out;
    
  private:
    AttributeConfigList_2* _pd_seq;
  };

  class AttributeConfigList_2_out {
  public:
    inline AttributeConfigList_2_out(AttributeConfigList_2*& _s) : _data(_s) { _data = 0; }
    inline AttributeConfigList_2_out(AttributeConfigList_2_var& _s)
      : _data(_s._pd_seq) { _s = (AttributeConfigList_2*) 0; }
    inline AttributeConfigList_2_out(const AttributeConfigList_2_out& _s) : _data(_s._data) {}
    inline AttributeConfigList_2_out& operator = (const AttributeConfigList_2_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline AttributeConfigList_2_out& operator = (AttributeConfigList_2* _s) {
      _data = _s;
      return *this;
    }
    inline operator AttributeConfigList_2*&()  { return _data; }
    inline AttributeConfigList_2*& ptr()       { return _data; }
    inline AttributeConfigList_2* operator->() { return _data; }

    inline AttributeConfig_2& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    AttributeConfigList_2*& _data;

  private:
    AttributeConfigList_2_out();
    AttributeConfigList_2_out& operator=(const AttributeConfigList_2_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_AttributeValueList;

  class AttributeValueList_var;

  class AttributeValueList : public _CORBA_Unbounded_Sequence< AttributeValue >  {
  public:
    typedef AttributeValueList_var _var_type;
    inline AttributeValueList() {}
    inline AttributeValueList(const AttributeValueList& _s)
      : _CORBA_Unbounded_Sequence< AttributeValue > (_s) {}

    inline AttributeValueList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< AttributeValue > (_max) {}
    inline AttributeValueList(_CORBA_ULong _max, _CORBA_ULong _len, AttributeValue* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< AttributeValue > (_max, _len, _val, _rel) {}

  

    inline AttributeValueList& operator = (const AttributeValueList& _s) {
      _CORBA_Unbounded_Sequence< AttributeValue > ::operator=(_s);
      return *this;
    }
  };

  class AttributeValueList_out;

  class AttributeValueList_var {
  public:
    inline AttributeValueList_var() : _pd_seq(0) {}
    inline AttributeValueList_var(AttributeValueList* _s) : _pd_seq(_s) {}
    inline AttributeValueList_var(const AttributeValueList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new AttributeValueList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~AttributeValueList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline AttributeValueList_var& operator = (AttributeValueList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline AttributeValueList_var& operator = (const AttributeValueList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new AttributeValueList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline AttributeValue& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline AttributeValueList* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator AttributeValueList& () const { return *_pd_seq; }
#else
    inline operator const AttributeValueList& () const { return *_pd_seq; }
    inline operator AttributeValueList& () { return *_pd_seq; }
#endif
      
    inline const AttributeValueList& in() const { return *_pd_seq; }
    inline AttributeValueList&       inout()    { return *_pd_seq; }
    inline AttributeValueList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline AttributeValueList* _retn() { AttributeValueList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class AttributeValueList_out;
    
  private:
    AttributeValueList* _pd_seq;
  };

  class AttributeValueList_out {
  public:
    inline AttributeValueList_out(AttributeValueList*& _s) : _data(_s) { _data = 0; }
    inline AttributeValueList_out(AttributeValueList_var& _s)
      : _data(_s._pd_seq) { _s = (AttributeValueList*) 0; }
    inline AttributeValueList_out(const AttributeValueList_out& _s) : _data(_s._data) {}
    inline AttributeValueList_out& operator = (const AttributeValueList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline AttributeValueList_out& operator = (AttributeValueList* _s) {
      _data = _s;
      return *this;
    }
    inline operator AttributeValueList*&()  { return _data; }
    inline AttributeValueList*& ptr()       { return _data; }
    inline AttributeValueList* operator->() { return _data; }

    inline AttributeValue& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    AttributeValueList*& _data;

  private:
    AttributeValueList_out();
    AttributeValueList_out& operator=(const AttributeValueList_var&);
  };

  struct DevInfo {
    typedef _CORBA_ConstrType_Variable_Var<DevInfo> _var_type;

    
    CORBA::String_member dev_class;

    CORBA::String_member server_id;

    CORBA::String_member server_host;

    CORBA::Long server_version;

    CORBA::String_member doc_url;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DevInfo::_var_type DevInfo_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DevInfo,DevInfo_var > DevInfo_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevInfo;

  struct DevCmdHistory {
    typedef _CORBA_ConstrType_Variable_Var<DevCmdHistory> _var_type;

    
    TimeVal time;

    CORBA::Boolean cmd_failed;

    CORBA::Any value;

    DevErrorList errors;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DevCmdHistory::_var_type DevCmdHistory_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DevCmdHistory,DevCmdHistory_var > DevCmdHistory_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevCmdHistory;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevCmdHistoryList;

  class DevCmdHistoryList_var;

  class DevCmdHistoryList : public _CORBA_Unbounded_Sequence< DevCmdHistory >  {
  public:
    typedef DevCmdHistoryList_var _var_type;
    inline DevCmdHistoryList() {}
    inline DevCmdHistoryList(const DevCmdHistoryList& _s)
      : _CORBA_Unbounded_Sequence< DevCmdHistory > (_s) {}

    inline DevCmdHistoryList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< DevCmdHistory > (_max) {}
    inline DevCmdHistoryList(_CORBA_ULong _max, _CORBA_ULong _len, DevCmdHistory* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< DevCmdHistory > (_max, _len, _val, _rel) {}

  

    inline DevCmdHistoryList& operator = (const DevCmdHistoryList& _s) {
      _CORBA_Unbounded_Sequence< DevCmdHistory > ::operator=(_s);
      return *this;
    }
  };

  class DevCmdHistoryList_out;

  class DevCmdHistoryList_var {
  public:
    inline DevCmdHistoryList_var() : _pd_seq(0) {}
    inline DevCmdHistoryList_var(DevCmdHistoryList* _s) : _pd_seq(_s) {}
    inline DevCmdHistoryList_var(const DevCmdHistoryList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevCmdHistoryList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevCmdHistoryList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevCmdHistoryList_var& operator = (DevCmdHistoryList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevCmdHistoryList_var& operator = (const DevCmdHistoryList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevCmdHistoryList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline DevCmdHistory& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevCmdHistoryList* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevCmdHistoryList& () const { return *_pd_seq; }
#else
    inline operator const DevCmdHistoryList& () const { return *_pd_seq; }
    inline operator DevCmdHistoryList& () { return *_pd_seq; }
#endif
      
    inline const DevCmdHistoryList& in() const { return *_pd_seq; }
    inline DevCmdHistoryList&       inout()    { return *_pd_seq; }
    inline DevCmdHistoryList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevCmdHistoryList* _retn() { DevCmdHistoryList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevCmdHistoryList_out;
    
  private:
    DevCmdHistoryList* _pd_seq;
  };

  class DevCmdHistoryList_out {
  public:
    inline DevCmdHistoryList_out(DevCmdHistoryList*& _s) : _data(_s) { _data = 0; }
    inline DevCmdHistoryList_out(DevCmdHistoryList_var& _s)
      : _data(_s._pd_seq) { _s = (DevCmdHistoryList*) 0; }
    inline DevCmdHistoryList_out(const DevCmdHistoryList_out& _s) : _data(_s._data) {}
    inline DevCmdHistoryList_out& operator = (const DevCmdHistoryList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevCmdHistoryList_out& operator = (DevCmdHistoryList* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevCmdHistoryList*&()  { return _data; }
    inline DevCmdHistoryList*& ptr()       { return _data; }
    inline DevCmdHistoryList* operator->() { return _data; }

    inline DevCmdHistory& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevCmdHistoryList*& _data;

  private:
    DevCmdHistoryList_out();
    DevCmdHistoryList_out& operator=(const DevCmdHistoryList_var&);
  };

  struct DevAttrHistory {
    typedef _CORBA_ConstrType_Variable_Var<DevAttrHistory> _var_type;

    
    CORBA::Boolean attr_failed;

    AttributeValue value;

    DevErrorList errors;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DevAttrHistory::_var_type DevAttrHistory_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DevAttrHistory,DevAttrHistory_var > DevAttrHistory_out;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevAttrHistory;

  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_DevAttrHistoryList;

  class DevAttrHistoryList_var;

  class DevAttrHistoryList : public _CORBA_Unbounded_Sequence< DevAttrHistory >  {
  public:
    typedef DevAttrHistoryList_var _var_type;
    inline DevAttrHistoryList() {}
    inline DevAttrHistoryList(const DevAttrHistoryList& _s)
      : _CORBA_Unbounded_Sequence< DevAttrHistory > (_s) {}

    inline DevAttrHistoryList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< DevAttrHistory > (_max) {}
    inline DevAttrHistoryList(_CORBA_ULong _max, _CORBA_ULong _len, DevAttrHistory* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< DevAttrHistory > (_max, _len, _val, _rel) {}

  

    inline DevAttrHistoryList& operator = (const DevAttrHistoryList& _s) {
      _CORBA_Unbounded_Sequence< DevAttrHistory > ::operator=(_s);
      return *this;
    }
  };

  class DevAttrHistoryList_out;

  class DevAttrHistoryList_var {
  public:
    inline DevAttrHistoryList_var() : _pd_seq(0) {}
    inline DevAttrHistoryList_var(DevAttrHistoryList* _s) : _pd_seq(_s) {}
    inline DevAttrHistoryList_var(const DevAttrHistoryList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DevAttrHistoryList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DevAttrHistoryList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DevAttrHistoryList_var& operator = (DevAttrHistoryList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DevAttrHistoryList_var& operator = (const DevAttrHistoryList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DevAttrHistoryList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline DevAttrHistory& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DevAttrHistoryList* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DevAttrHistoryList& () const { return *_pd_seq; }
#else
    inline operator const DevAttrHistoryList& () const { return *_pd_seq; }
    inline operator DevAttrHistoryList& () { return *_pd_seq; }
#endif
      
    inline const DevAttrHistoryList& in() const { return *_pd_seq; }
    inline DevAttrHistoryList&       inout()    { return *_pd_seq; }
    inline DevAttrHistoryList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DevAttrHistoryList* _retn() { DevAttrHistoryList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DevAttrHistoryList_out;
    
  private:
    DevAttrHistoryList* _pd_seq;
  };

  class DevAttrHistoryList_out {
  public:
    inline DevAttrHistoryList_out(DevAttrHistoryList*& _s) : _data(_s) { _data = 0; }
    inline DevAttrHistoryList_out(DevAttrHistoryList_var& _s)
      : _data(_s._pd_seq) { _s = (DevAttrHistoryList*) 0; }
    inline DevAttrHistoryList_out(const DevAttrHistoryList_out& _s) : _data(_s._data) {}
    inline DevAttrHistoryList_out& operator = (const DevAttrHistoryList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DevAttrHistoryList_out& operator = (DevAttrHistoryList* _s) {
      _data = _s;
      return *this;
    }
    inline operator DevAttrHistoryList*&()  { return _data; }
    inline DevAttrHistoryList*& ptr()       { return _data; }
    inline DevAttrHistoryList* operator->() { return _data; }

    inline DevAttrHistory& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DevAttrHistoryList*& _data;

  private:
    DevAttrHistoryList_out();
    DevAttrHistoryList_out& operator=(const DevAttrHistoryList_var&);
  };

#ifndef __Tango_mDevice__
#define __Tango_mDevice__

  class Device;
  class _objref_Device;
  class _impl_Device;
  
  typedef _objref_Device* Device_ptr;
  typedef Device_ptr DeviceRef;

  class Device_Helper {
  public:
    typedef Device_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Device, Device_Helper> Device_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Device,Device_Helper > Device_out;

#endif

  class Device {
  public:
    // Declarations for this interface type.
    typedef Device_ptr _ptr_type;
    typedef Device_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(CORBA::Object_ptr);
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_Device :
    public virtual CORBA::Object, public virtual omniObjRef
  {
  public:
    CORBA::Any* command_inout(const char* command, const CORBA::Any& argin);
    AttributeConfigList* get_attribute_config(const DevVarStringArray& names);
    void set_attribute_config(const AttributeConfigList& new_conf);
    AttributeValueList* read_attributes(const DevVarStringArray& names);
    void write_attributes(const AttributeValueList& values);
    void ping();
    DevVarStringArray* black_box(CORBA::Long n);
    DevInfo* info();
    DevCmdInfoList* command_list_query();
    DevCmdInfo* command_query(const char* command);
    char* name();
    char* description();
    DevState state();
    char* status();
    char* adm_name();

    inline _objref_Device()  { _PR_setobj(0); }  // nil
    _objref_Device(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_Device();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_Device(const _objref_Device&);
    _objref_Device& operator = (const _objref_Device&);
    // not implemented
  };

  class _pof_Device : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_Device() : _OMNI_NS(proxyObjectFactory)(Device::_PD_repoId) {}
    virtual ~_pof_Device();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_Device :
    public virtual omniServant
  {
  public:
    virtual ~_impl_Device();

    virtual CORBA::Any* command_inout(const char* command, const CORBA::Any& argin) = 0;
    virtual AttributeConfigList* get_attribute_config(const DevVarStringArray& names) = 0;
    virtual void set_attribute_config(const AttributeConfigList& new_conf) = 0;
    virtual AttributeValueList* read_attributes(const DevVarStringArray& names) = 0;
    virtual void write_attributes(const AttributeValueList& values) = 0;
    virtual void ping() = 0;
    virtual DevVarStringArray* black_box(CORBA::Long n) = 0;
    virtual DevInfo* info() = 0;
    virtual DevCmdInfoList* command_list_query() = 0;
    virtual DevCmdInfo* command_query(const char* command) = 0;
    virtual char* name() = 0;
    virtual char* description() = 0;
    virtual DevState state() = 0;
    virtual char* status() = 0;
    virtual char* adm_name() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
  };


  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_Device;

#ifndef __Tango_mDevice__2__
#define __Tango_mDevice__2__

  class Device_2;
  class _objref_Device_2;
  class _impl_Device_2;
  
  typedef _objref_Device_2* Device_2_ptr;
  typedef Device_2_ptr Device_2Ref;

  class Device_2_Helper {
  public:
    typedef Device_2_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Device_2, Device_2_Helper> Device_2_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Device_2,Device_2_Helper > Device_2_out;

#endif

  class Device_2 {
  public:
    // Declarations for this interface type.
    typedef Device_2_ptr _ptr_type;
    typedef Device_2_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(CORBA::Object_ptr);
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_Device_2 :
    public virtual _objref_Device
  {
  public:
    CORBA::Any* command_inout_2(const char* command, const CORBA::Any& argin, DevSource source);
    AttributeValueList* read_attributes_2(const DevVarStringArray& names, DevSource source);
    AttributeConfigList_2* get_attribute_config_2(const DevVarStringArray& names);
    DevCmdInfoList_2* command_list_query_2();
    DevCmdInfo_2* command_query_2(const char* command);
    DevCmdHistoryList* command_inout_history_2(const char* command, CORBA::Long n);
    DevAttrHistoryList* read_attribute_history_2(const char* name, CORBA::Long n);

    inline _objref_Device_2()  { _PR_setobj(0); }  // nil
    _objref_Device_2(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_Device_2();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_Device_2(const _objref_Device_2&);
    _objref_Device_2& operator = (const _objref_Device_2&);
    // not implemented
  };

  class _pof_Device_2 : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_Device_2() : _OMNI_NS(proxyObjectFactory)(Device_2::_PD_repoId) {}
    virtual ~_pof_Device_2();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_Device_2 :
    public virtual _impl_Device
  {
  public:
    virtual ~_impl_Device_2();

    virtual CORBA::Any* command_inout_2(const char* command, const CORBA::Any& argin, DevSource source) = 0;
    virtual AttributeValueList* read_attributes_2(const DevVarStringArray& names, DevSource source) = 0;
    virtual AttributeConfigList_2* get_attribute_config_2(const DevVarStringArray& names) = 0;
    virtual DevCmdInfoList_2* command_list_query_2() = 0;
    virtual DevCmdInfo_2* command_query_2(const char* command) = 0;
    virtual DevCmdHistoryList* command_inout_history_2(const char* command, CORBA::Long n) = 0;
    virtual DevAttrHistoryList* read_attribute_history_2(const char* name, CORBA::Long n) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
  };


  _CORBA_MODULE_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_Device_2;

_CORBA_MODULE_END



_CORBA_MODULE POA_Tango
_CORBA_MODULE_BEG

  class Device :
    public virtual Tango::_impl_Device,
    public virtual PortableServer::ServantBase
  {
  public:
    virtual ~Device();

    inline Tango::Device_ptr _this() {
      return (Tango::Device_ptr) _do_this(Tango::Device::_PD_repoId);
    }
  };

  class Device_2 :
    public virtual Tango::_impl_Device_2,
    public virtual Device
  {
  public:
    virtual ~Device_2();

    inline Tango::Device_2_ptr _this() {
      return (Tango::Device_2_ptr) _do_this(Tango::Device_2::_PD_repoId);
    }
  };

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator <<= (CORBA::Any& _a, const Tango::DevVarFloatArray& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevVarFloatArray* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevVarFloatArray*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevVarFloatArray*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevVarDoubleArray& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevVarDoubleArray* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevVarDoubleArray*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevVarDoubleArray*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevVarShortArray& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevVarShortArray* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevVarShortArray*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevVarShortArray*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevVarLongArray& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevVarLongArray* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevVarLongArray*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevVarLongArray*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevVarCharArray& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevVarCharArray* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevVarCharArray*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevVarCharArray*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevVarStringArray& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevVarStringArray* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevVarStringArray*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevVarStringArray*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevVarUShortArray& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevVarUShortArray* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevVarUShortArray*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevVarUShortArray*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevVarULongArray& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevVarULongArray* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevVarULongArray*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevVarULongArray*& _sp);

extern void operator<<=(CORBA::Any& _a, const Tango::DevVarLongStringArray& _s);
extern void operator<<=(CORBA::Any& _a, Tango::DevVarLongStringArray* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::DevVarLongStringArray*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::DevVarLongStringArray*& _sp);

extern void operator<<=(CORBA::Any& _a, const Tango::DevVarDoubleStringArray& _s);
extern void operator<<=(CORBA::Any& _a, Tango::DevVarDoubleStringArray* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::DevVarDoubleStringArray*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::DevVarDoubleStringArray*& _sp);

inline void operator >>=(Tango::AttrQuality _e, cdrStream& s) {
  ::operator>>=((CORBA::ULong)_e, s);
}

inline void operator <<= (Tango::AttrQuality& _e, cdrStream& s) {
  CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  switch (_0RL_e) {
    case Tango::ATTR_VALID:

    case Tango::ATTR_INVALID:

    case Tango::ATTR_ALARM:


    _e = (Tango::AttrQuality) _0RL_e;
    break;
  default:
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(CORBA::Any& _a, Tango::AttrQuality _s);
CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::AttrQuality& _s);

inline void operator >>=(Tango::AttrWriteType _e, cdrStream& s) {
  ::operator>>=((CORBA::ULong)_e, s);
}

inline void operator <<= (Tango::AttrWriteType& _e, cdrStream& s) {
  CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  switch (_0RL_e) {
    case Tango::READ:

    case Tango::READ_WITH_WRITE:

    case Tango::WRITE:

    case Tango::READ_WRITE:


    _e = (Tango::AttrWriteType) _0RL_e;
    break;
  default:
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(CORBA::Any& _a, Tango::AttrWriteType _s);
CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::AttrWriteType& _s);

inline void operator >>=(Tango::AttrDataFormat _e, cdrStream& s) {
  ::operator>>=((CORBA::ULong)_e, s);
}

inline void operator <<= (Tango::AttrDataFormat& _e, cdrStream& s) {
  CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  switch (_0RL_e) {
    case Tango::SCALAR:

    case Tango::SPECTRUM:

    case Tango::IMAGE:


    _e = (Tango::AttrDataFormat) _0RL_e;
    break;
  default:
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(CORBA::Any& _a, Tango::AttrDataFormat _s);
CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::AttrDataFormat& _s);

inline void operator >>=(Tango::DevSource _e, cdrStream& s) {
  ::operator>>=((CORBA::ULong)_e, s);
}

inline void operator <<= (Tango::DevSource& _e, cdrStream& s) {
  CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  switch (_0RL_e) {
    case Tango::DEV:

    case Tango::CACHE:

    case Tango::CACHE_DEV:


    _e = (Tango::DevSource) _0RL_e;
    break;
  default:
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(CORBA::Any& _a, Tango::DevSource _s);
CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::DevSource& _s);

inline void operator >>=(Tango::ErrSeverity _e, cdrStream& s) {
  ::operator>>=((CORBA::ULong)_e, s);
}

inline void operator <<= (Tango::ErrSeverity& _e, cdrStream& s) {
  CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  switch (_0RL_e) {
    case Tango::WARN:

    case Tango::ERR:

    case Tango::PANIC:


    _e = (Tango::ErrSeverity) _0RL_e;
    break;
  default:
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(CORBA::Any& _a, Tango::ErrSeverity _s);
CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::ErrSeverity& _s);

inline void operator >>=(Tango::DevState _e, cdrStream& s) {
  ::operator>>=((CORBA::ULong)_e, s);
}

inline void operator <<= (Tango::DevState& _e, cdrStream& s) {
  CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  switch (_0RL_e) {
    case Tango::ON:

    case Tango::OFF:

    case Tango::CLOSE:

    case Tango::OPEN:

    case Tango::INSERT:

    case Tango::EXTRACT:

    case Tango::MOVING:

    case Tango::STANDBY:

    case Tango::FAULT:

    case Tango::INIT:

    case Tango::RUNNING:

    case Tango::ALARM:

    case Tango::DISABLE:

    case Tango::UNKNOWN:


    _e = (Tango::DevState) _0RL_e;
    break;
  default:
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(CORBA::Any& _a, Tango::DevState _s);
CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::DevState& _s);

inline void operator >>=(Tango::DispLevel _e, cdrStream& s) {
  ::operator>>=((CORBA::ULong)_e, s);
}

inline void operator <<= (Tango::DispLevel& _e, cdrStream& s) {
  CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  switch (_0RL_e) {
    case Tango::OPERATOR:

    case Tango::EXPERT:


    _e = (Tango::DispLevel) _0RL_e;
    break;
  default:
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(CORBA::Any& _a, Tango::DispLevel _s);
CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::DispLevel& _s);

extern void operator<<=(CORBA::Any& _a, const Tango::TimeVal& _s);
extern void operator<<=(CORBA::Any& _a, Tango::TimeVal* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::TimeVal*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::TimeVal*& _sp);

extern void operator<<=(CORBA::Any& _a, const Tango::DevCmdInfo& _s);
extern void operator<<=(CORBA::Any& _a, Tango::DevCmdInfo* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::DevCmdInfo*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::DevCmdInfo*& _sp);

extern void operator<<=(CORBA::Any& _a, const Tango::DevCmdInfo_2& _s);
extern void operator<<=(CORBA::Any& _a, Tango::DevCmdInfo_2* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::DevCmdInfo_2*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::DevCmdInfo_2*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevCmdInfoList& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevCmdInfoList* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevCmdInfoList*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevCmdInfoList*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevCmdInfoList_2& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevCmdInfoList_2* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevCmdInfoList_2*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevCmdInfoList_2*& _sp);

extern void operator<<=(CORBA::Any& _a, const Tango::DevError& _s);
extern void operator<<=(CORBA::Any& _a, Tango::DevError* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::DevError*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::DevError*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevErrorList& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevErrorList* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevErrorList*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevErrorList*& _sp);

void operator<<=(CORBA::Any& _a, const Tango::DevFailed& _s);
void operator<<=(CORBA::Any& _a, const Tango::DevFailed* _sp);
CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::DevFailed*& _sp);

extern void operator<<=(CORBA::Any& _a, const Tango::AttributeConfig& _s);
extern void operator<<=(CORBA::Any& _a, Tango::AttributeConfig* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::AttributeConfig*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::AttributeConfig*& _sp);

extern void operator<<=(CORBA::Any& _a, const Tango::AttributeConfig_2& _s);
extern void operator<<=(CORBA::Any& _a, Tango::AttributeConfig_2* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::AttributeConfig_2*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::AttributeConfig_2*& _sp);

extern void operator<<=(CORBA::Any& _a, const Tango::AttributeValue& _s);
extern void operator<<=(CORBA::Any& _a, Tango::AttributeValue* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::AttributeValue*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::AttributeValue*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::AttributeConfigList& _s);
inline void operator <<= (CORBA::Any& _a, Tango::AttributeConfigList* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::AttributeConfigList*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::AttributeConfigList*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::AttributeConfigList_2& _s);
inline void operator <<= (CORBA::Any& _a, Tango::AttributeConfigList_2* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::AttributeConfigList_2*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::AttributeConfigList_2*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::AttributeValueList& _s);
inline void operator <<= (CORBA::Any& _a, Tango::AttributeValueList* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::AttributeValueList*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::AttributeValueList*& _sp);

extern void operator<<=(CORBA::Any& _a, const Tango::DevInfo& _s);
extern void operator<<=(CORBA::Any& _a, Tango::DevInfo* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::DevInfo*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::DevInfo*& _sp);

extern void operator<<=(CORBA::Any& _a, const Tango::DevCmdHistory& _s);
extern void operator<<=(CORBA::Any& _a, Tango::DevCmdHistory* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::DevCmdHistory*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::DevCmdHistory*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevCmdHistoryList& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevCmdHistoryList* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevCmdHistoryList*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevCmdHistoryList*& _sp);

extern void operator<<=(CORBA::Any& _a, const Tango::DevAttrHistory& _s);
extern void operator<<=(CORBA::Any& _a, Tango::DevAttrHistory* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::DevAttrHistory*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const Tango::DevAttrHistory*& _sp);

extern void operator <<= (CORBA::Any& _a, const Tango::DevAttrHistoryList& _s);
inline void operator <<= (CORBA::Any& _a, Tango::DevAttrHistoryList* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, Tango::DevAttrHistoryList*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const Tango::DevAttrHistoryList*& _sp);

void operator<<=(CORBA::Any& _a, Tango::Device_ptr _s);
void operator<<=(CORBA::Any& _a, Tango::Device_ptr* _s);
CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::Device_ptr& _s);

void operator<<=(CORBA::Any& _a, Tango::Device_2_ptr _s);
void operator<<=(CORBA::Any& _a, Tango::Device_2_ptr* _s);
CORBA::Boolean operator>>=(const CORBA::Any& _a, Tango::Device_2_ptr& _s);



inline void
Tango::Device::_marshalObjRef(::Tango::Device_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
Tango::Device_2::_marshalObjRef(::Tango::Device_2_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_tango
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_tango
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_tango
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_tango
#endif

#endif  // __tango_hh__

